{"version":3,"sources":["component/Histogram.jsx","component/SortTypeDropDown.jsx","component/Panel.jsx","component/ConfigBanner.jsx","util/arrayGeneration.js","util/sortutil.js","module/ArrayViewController.js","algorithms/bubblesort.js","algorithms/insertionsort.js","algorithms/quicksort.js","algorithms/mergesort.js","algorithms/dualpivotquicksort.js","algorithms/selectionsort.js","component/SortVizApp.jsx","App.js","serviceWorker.js","index.js"],"names":["Histogram","createBarList","array","colorArray","width","length","map","element","index","createBar","height","color","styles","backgroundColor","key","className","this","props","Component","Bar","nextProps","nextState","style","SortTypeDropDown","ReactDOM","findDOMNode","addEventListener","e","setSortType","target","value","selectedSortType","isSorting","disabled","name","selected","Panel","ConfigBanner","initialSize","initialDelay","areSorting","onClickSort","onChangeSize","onChangeDelay","onToggleSecondArray","id","onChange","defaultValue","type","min","max","onMouseUp","onClick","shuffledArray","size","arr","i","push","tmp","j","Math","floor","random","sleep","ms","Promise","resolve","setTimeout","ArrayViewController","callbacks","getDelay","setArray","setColorArray","setIsSorting","trackArray","Array","fill","prevColor","mark","delay","markPair","unmarkPair","leftVal","rightVal","val","elementVal","multiplier","iprev","jprev","tArr","swapColors","swapTracking","unmark","cArr","oldIndex","newIndex","begin","end","markSection","bubblesort","a","sorted","lastSortedIndex","getLength","compare","swap","markSorted","insertionsort","quicksort","quickSort","start","partition","partitionIndex","get","pivot","trackPointer","compareElementToVal","updatePointer","untrackPointer","unmarkAll","mergesort","mergeSort","mid","merge","shadowArr","vali","valj","set","dualpivotquicksort","dualPivotQuickSort","partitions","lpivot","rpivot","curr","currVal","selectionsort","minVal","SortVizApp","createPanels","setSelectedSortType","bind","arrayviews","state","arrayview","setState","forEach","avc","shuffledArr","parseInt","slice","newPanels","createDefaultPanelObject","panels","pop","viewIndex","sortType","areStillSorting","baseArray","App","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wXAIMA,G,8NASJC,cAAgB,SAACC,EAAOC,GACtB,IAAMC,EAAQ,IAAMF,EAAMG,OACpBA,EAASH,EAAMG,OACrB,OAAOH,EAAMI,KAAI,SAACC,EAASC,GACzB,OAAO,EAAKC,UAAUF,EAAUF,EAAQF,EAAWK,GAAQJ,EAAOI,O,EAItEC,UAAY,SAACC,EAAQC,EAAOP,EAAOI,GACjC,IAAMI,EAAS,CACbF,OAAiB,IAATA,EAAe,IACvBN,MAAOA,EAAQ,IACfS,gBAAiBF,GAGnB,OACE,4BACE,kBAAC,EAAD,CAAKG,IAAKJ,EAASC,EAAQH,EAAQJ,EAAOQ,OAAQA,M,uDAxBtD,OACE,wBAAIG,UAAU,6BACXC,KAAKf,cAAce,KAAKC,MAAMf,MAAOc,KAAKC,MAAMd,iB,GAJjCe,cAgClBC,E,oLACkBC,EAAWC,GAC/B,GAAIL,KAAKC,MAAML,QAAUQ,EAAUR,OACjC,OAAO,I,+BAKT,OAAO,yBAAKG,UAAU,MAAMO,MAAON,KAAKC,MAAML,a,GARhCM,aAYHlB,ICLAuB,G,wLAvCQ,IAAD,OAClBC,IAASC,YAAYT,MAAMU,iBAAiB,UAAU,SAACC,GAAD,OACpD,EAAKV,MAAMW,YAAYD,EAAEE,OAAOC,MAAO,EAAKb,MAAMT,Y,+BAI5C,IAAD,EACwCQ,KAAKC,MAA5Cc,EADD,EACCA,iBAAkBC,EADnB,EACmBA,UAAWxB,EAD9B,EAC8BA,MAErC,OACE,0BAAMyB,SAAUD,GACd,4BAAQE,KAAM,iBAAmB1B,GAC/B,4BAAQsB,MAAM,SAASK,SAAU,WAAaJ,GAA9C,UAGA,4BAAQD,MAAM,YAAYK,SAAU,cAAgBJ,GAApD,aAGA,4BAAQD,MAAM,YAAYK,SAAU,cAAgBJ,GAApD,aAGA,4BAAQD,MAAM,QAAQK,SAAU,UAAYJ,GAA5C,SAGA,4BAAQD,MAAM,QAAQK,SAAU,UAAYJ,GAA5C,SAGA,4BACED,MAAM,iBACNK,SAAU,mBAAqBJ,GAFjC,4B,GA5BqBb,cCiBhBkB,MAff,SAAenB,GAEb,OACE,yBAAKF,UAAU,QAAQO,MAAO,CAAEZ,OAAQO,EAAMP,SAC5C,kBAAC,EAAD,CACEF,MAAOS,EAAMT,MACbwB,UAAWf,EAAMe,UACjBD,iBAAkBd,EAAMc,iBACxBH,YAAaX,EAAMW,cAErB,kBAAC,EAAD,CAAW1B,MAAOe,EAAMf,MAAOC,WAAYc,EAAMd,e,MCqBxCkC,MAjCf,SAAsBpB,GAAQ,IACpBqB,EAAyGrB,EAAzGqB,YAAaC,EAA4FtB,EAA5FsB,aAAcC,EAA8EvB,EAA9EuB,WAAYC,EAAkExB,EAAlEwB,YAAaC,EAAqDzB,EAArDyB,aAAcC,EAAuC1B,EAAvC0B,cAAeC,EAAwB3B,EAAxB2B,oBACzF,OACE,yBAAK7B,UAAU,gBACb,wCACA,2BACE8B,GAAG,cACHC,SAAUJ,EACVK,aAAcT,EACdU,KAAK,QACLC,IAAI,IACJC,IAAI,MACJjB,SAAUO,IAEZ,yCACA,2BACEK,GAAG,eACHE,aAAcR,EACdY,UAAWR,EACXK,KAAK,QACLC,IAAI,IACJC,IAAI,QAEN,4BAAQE,QAASX,EAAaR,SAAUO,GAAxC,QAGA,4BAAQY,QAASR,EAAqBX,SAAUO,GAAhD,yBC7BN,SAASa,EAAcC,GAGrB,IAFA,IAAIC,EAAM,GAEDC,EAAI,EAAGA,EAAIF,EAAME,IACxBD,EAAIE,KAAKD,GAGX,IAAK,IAAIA,EAAID,EAAIlD,OAAS,EAAGmD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAMH,EAAIC,GACVG,EAAIC,KAAKC,MAAMD,KAAKE,SAAWN,GACnCD,EAAIC,GAAKD,EAAII,GACbJ,EAAII,GAAKD,EAGX,OAAOH,ECdF,SAASQ,EAAMC,GACpB,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,M,ICsNvCI,E,WApNb,WAAYlE,EAAOC,EAAYK,EAAO6D,GAAY,oBAChDrD,KAAKd,MAAQA,EACbc,KAAKb,WAAaA,EAClBa,KAAKX,OAASH,EAAMG,OACpBW,KAAKR,MAAQA,EACbQ,KAAKsD,SAAWD,EAAUC,SAC1BtD,KAAKuD,SAAWF,EAAUE,SAC1BvD,KAAKwD,cAAgBH,EAAUG,cAC/BxD,KAAKyD,aAAeJ,EAAUI,aAE9BzD,KAAK0D,WAAaC,MAAMzE,EAAMG,QAAQuE,MAAK,G,uDAM3C,OAAO5D,KAAKd,Q,sCAIZ,OAAOc,KAAKb,a,kCAIZ,OAAOa,KAAKd,MAAMG,S,mEAGVmD,G,4FAAG7C,E,+BAAQ,MACbkE,EAAY7D,KAAKb,WAAWqD,GAClCxC,KAAK8D,KAAKtB,EAAG7C,G,SACPK,KAAK+D,Q,cACX/D,KAAK8D,KAAKtB,EAAGqB,G,kBACN7D,KAAKd,MAAMsD,I,8KAGNA,EAAGG,G,8FAAGhD,E,+BAAQ,MAC1BK,KAAKgE,SAASxB,EAAGG,EAAGhD,G,SACdK,KAAK+D,MAAM,G,UACjB/D,KAAKiE,WAAWzB,EAAGG,GAEbuB,EAAUlE,KAAKd,MAAMsD,GACrB2B,EAAWnE,KAAKd,MAAMyD,GAExBuB,IAAYC,E,0CACP,G,aACED,EAAUC,G,0CACZ,G,kCAEC,G,6LAIc3B,EAAG4B,G,8FAAKzE,E,+BAAQ,MAClCkE,EAAY7D,KAAKb,WAAWqD,GAClCxC,KAAK8D,KAAKtB,EAAG7C,G,SACPK,KAAK+D,Q,UACX/D,KAAK8D,KAAKtB,EAAGqB,IACPQ,EAAarE,KAAKd,MAAMsD,MAEX4B,E,0CACV,G,aACEC,EAAaD,G,0CACf,G,kCAEC,G,2QAKAE,E,+BAAa,E,SACjBvB,EAAM/C,KAAKsD,WAAagB,G,yKAItB9B,EAAG4B,G,oGAAKzE,E,+BAAQ,MAChBT,EAAuCc,KAAvCd,MAAOC,EAAgCa,KAAhCb,WAAYoE,EAAoBvD,KAApBuD,SAAU/D,EAAUQ,KAAVR,MAC/BqE,EAAY1E,EAAWqD,GAC7BxC,KAAK8D,KAAKtB,EAAG7C,GACbT,EAAMsD,GAAK4B,EACXb,EAASrE,EAAOM,G,SACVQ,KAAK+D,Q,OACX/D,KAAK8D,KAAKtB,EAAGqB,G,6KAGJrB,EAAGG,G,sGAAGhD,E,+BAAQ,OACnB6C,IAAMG,E,wDACFzD,EAAuCc,KAAvCd,MAAOC,EAAgCa,KAAhCb,WAAYoE,EAAoBvD,KAApBuD,SAAU/D,EAAUQ,KAAVR,MAE/B+E,EAAQpF,EAAWqD,GACnBgC,EAAQrF,EAAWwD,GAEzB3C,KAAKgE,SAASxB,EAAGG,EAAGhD,GAEhB+C,EAAMxD,EAAMsD,G,UACVxC,KAAK+D,Q,eACX7E,EAAMsD,GAAKtD,EAAMyD,GACjBY,EAASrE,EAAOM,G,UACVQ,KAAK+D,MAAM,G,eACjB7E,EAAMyD,GAAKD,EACXa,EAASrE,EAAOM,G,UACVQ,KAAK+D,Q,QAEX/D,KAAK8D,KAAKtB,EAAG+B,GACbvE,KAAK8D,KAAKnB,EAAG6B,KAEPC,EAAOzE,KAAK0D,YACTlB,IAAMiC,EAAK9B,MAClB3C,KAAK0E,WAAWlC,EAAGG,GACnB3C,KAAK2E,aAAanC,EAAGG,I,qIAKpBH,GAAmB,IAAhB7C,EAAe,uDAAP,MACNR,EAAqCa,KAArCb,WAAYqE,EAAyBxD,KAAzBwD,cAAehE,EAAUQ,KAAVR,MACnCL,EAAWqD,GAAK7C,EAChB6D,EAAcrE,EAAYK,K,+BAGnBgD,EAAGG,GAAmB,IAAhBhD,EAAe,uDAAP,MACrBK,KAAK8D,KAAKtB,EAAG7C,GACbK,KAAK8D,KAAKnB,EAAGhD,K,iCAGJ6C,EAAGG,GACZ3C,KAAK8D,KAAKtB,EAAG,SACbxC,KAAK8D,KAAKnB,EAAG,W,iCAGJH,GACTxC,KAAK8D,KAAKtB,EAAG,W,6BAGRA,GACLxC,KAAK8D,KAAKtB,EAAG,W,4BAGTA,EAAG7C,GACPK,KAAK0D,WAAWlB,IAAK,EACrBxC,KAAK8D,KAAKtB,EAAG7C,K,8BAGP6C,GACNxC,KAAK0D,WAAWlB,IAAK,EACrBxC,KAAK4E,OAAOpC,K,iCAGHA,EAAGG,GACZ,IAAMkC,EAAO7E,KAAKb,WACZuD,EAAMmC,EAAKrC,GACjBqC,EAAKrC,GAAKqC,EAAKlC,GACfkC,EAAKlC,GAAKD,EACV1C,KAAKwD,cAAcqB,EAAM7E,KAAKR,S,mCAGnBgD,EAAGG,GACd,IAAM8B,EAAOzE,KAAK0D,WACZhB,EAAM+B,EAAKjC,GACjBiC,EAAKjC,GAAKiC,EAAK9B,GACf8B,EAAK9B,GAAKD,I,mCAGCF,EAAG7C,GACdK,KAAK8D,KAAKtB,EAAG7C,K,oCAGDmF,EAAUC,GACtB/E,KAAK0E,WAAWI,EAAUC,K,qCAGbvC,GACbxC,KAAK4E,OAAOpC,K,kCAKZ,IAFW,IACHrD,EAA6Ca,KAA7Cb,WAAYqE,EAAiCxD,KAAjCwD,cAAenE,EAAkBW,KAAlBX,OAAQG,EAAUQ,KAAVR,MAClCgD,EAAI,EAAGA,EAAInD,EAAQmD,IAC1BrD,EAAWqD,GAAK,QAElBgB,EAAcrE,EAAYK,K,2CAK1B,IAFoB,IACZL,EAA6Ca,KAA7Cb,WAAYqE,EAAiCxD,KAAjCwD,cAAenE,EAAkBW,KAAlBX,OAAQG,EAAUQ,KAAVR,MAClCgD,EAAI,EAAGA,EAAInD,EAAQmD,IACL,SAAjBrD,EAAWqD,KACbrD,EAAWqD,GAAK,SAGpBgB,EAAcrE,EAAYK,K,kCAGhBwF,EAAOC,EAAKtF,GAEtB,IADA,IAAMR,EAAaa,KAAKb,WACfqD,EAAIwC,EAAOxC,GAAKyC,EAAKzC,IAC5BrD,EAAWqD,GAAK7C,EAGlBK,KAAKwD,cAAcrE,EAAYa,KAAKR,S,+IAI3BgD,EAAI,E,YAAGA,EAAI,G,wBAClBxC,KAAKkF,YAAY,EAAGlF,KAAKd,MAAMG,OAAS,EAAG,S,SACrC0D,EAAM,K,cACZ/C,KAAKkF,YAAY,EAAGlF,KAAKd,MAAMG,OAAS,EAAG,S,SACrC0D,EAAM,K,OAJSP,I,uBAMvBxC,KAAKyD,cAAa,EAAOzD,KAAKR,O,8GCnNnB,SAAe2F,EAA9B,kC,4CAAe,WAA0B5C,GAA1B,mBAAA6C,EAAA,sDACTC,GAAS,EACTC,EAAkB/C,EAAIgD,YAFb,UAILF,EAJK,iBAKXA,GAAS,EAEA7C,EAAI,EAPF,YAOKA,EAAI8C,EAAkB,GAP3B,iCAQE/C,EAAIiD,QAAQhD,EAAGA,EAAI,GARrB,sBAQ6B,IAR7B,uCASDD,EAAIkD,KAAKjD,EAAGA,EAAI,GATf,QAUP6C,GAAS,EAVF,QAO8B7C,IAP9B,uBAaXD,EAAImD,aAAaJ,GAbN,4D,sBCAA,SAAeK,EAA9B,kC,4CAAe,WAA6BpD,GAA7B,mBAAA6C,EAAA,sDACP/F,EAASkD,EAAIgD,YAEV/C,EAAI,EAHA,YAGGA,EAAInD,GAHP,iBAIPsD,EAAIH,EACRD,EAAIyB,SAASrB,EAAGA,EAAI,GALT,uBAOGJ,EAAIiD,QAAQ7C,EAAGA,EAAI,GAPtB,4BAO+B,EAP/B,6CAOoCA,EAAI,EAPxC,mDAQHJ,EAAIkD,KAAK9C,EAAGA,EAAI,GARb,QASTA,IATS,uBAGeH,IAHf,4D,sBCAA,SAAeoD,EAA9B,kC,4CAAe,WAAyBrD,GAAzB,SAAA6C,EAAA,sEACPS,EAAUtD,EAAK,EAAGA,EAAIgD,YAAc,GAD7B,4C,+BAIAM,E,kFAAf,WAAyBtD,EAAKuD,EAAOb,GAArC,eAAAG,EAAA,2DACMU,EAAQb,GADd,gCAE+Bc,EAAUxD,EAAKuD,EAAOb,GAFrD,cAEQe,EAFR,gBAIUH,EAAUtD,EAAKuD,EAAOE,EAAiB,GAJjD,uBAKUH,EAAUtD,EAAKyD,EAAiB,EAAGf,GAL7C,4C,+BASec,E,kFAAf,WAAyBxD,EAAKuD,EAAOb,GAArC,mBAAAG,EAAA,sEACsB7C,EAAI0D,IAAIhB,GAD9B,OACQiB,EADR,OAIE3D,EAAIuB,KAAKmB,EAAK,UAGVzC,EAAIsD,EACJnD,EAAImD,EAERvD,EAAI4D,aAAa3D,EAAG,UAVtB,YAaSG,EAAIsC,GAbb,kCAce1C,EAAI6D,oBAAoBzD,EAAGuD,GAd1C,6BAcuD,EAdvD,8CAeY3D,EAAIkD,KAAKjD,IAAKG,EAAG,UAf7B,QAgBMJ,EAAI8D,cAAc7D,EAAI,EAAGA,GAhB/B,QAkBIG,IAlBJ,8BAqBEJ,EAAI+D,eAAe9D,GAGnBD,EAAIgE,YAxBN,UAyBQhE,EAAIkD,KAAKjD,EAAGyC,GAzBpB,iCA0BSzC,GA1BT,6C,sBCbe,SAAegE,EAA9B,kC,4CAAe,WAAyBjE,GAAzB,SAAA6C,EAAA,sEACPqB,EAAUlE,EAAK,EAAGA,EAAIgD,aADf,4C,+BAIAkB,E,kFAAf,WAAyBlE,EAAKuD,EAAOb,GAArC,eAAAG,EAAA,2DACMU,EAAQ,EAAIb,GADlB,uBAEUyB,EAAM9D,KAAKC,OAAOiD,EAAQb,GAAO,GAF3C,SAIUwB,EAAUlE,EAAKuD,EAAOY,GAJhC,uBAKUD,EAAUlE,EAAKmE,EAAKzB,GAL9B,uBAOU0B,EAAMpE,EAAKuD,EAAOY,EAAKzB,GAPjC,4C,+BAWe0B,E,oFAAf,WAAqBpE,EAAKuD,EAAOY,EAAKzB,GAAtC,uBAAAG,EAAA,sDACE7C,EAAIuB,KAAKgC,EAAO,UAChBvD,EAAIuB,KAAK4C,EAAK,UACdnE,EAAIuB,KAAKmB,EAAM,EAAG,UAEZ2B,EAAY,GAEdpE,EAAIsD,EACNnD,EAAI+D,EARR,YAUSlE,EAAIkE,GAAO/D,EAAIsC,GAVxB,iCAWuB1C,EAAI0D,IAAIzD,GAX/B,cAWUqE,EAXV,iBAYmBtE,EAAI0D,IAAItD,GAZ3B,QAYMmE,EAZN,OAcIF,EAAUnE,KAAKoE,EAAOC,EAAOD,EAAOC,GACpCD,EAAOC,EAAOtE,IAAMG,IAfxB,4BAkBSH,EAAIkE,GAlBb,6BAkBkBE,EAlBlB,UAkBuCrE,EAAI0D,IAAIzD,KAlB/C,yBAkB4BC,KAlB5B,6CAmBSE,EAAIsC,GAnBb,6BAmBkB2B,EAnBlB,UAmBuCrE,EAAI0D,IAAItD,KAnB/C,yBAmB4BF,KAnB5B,wCAqBEF,EAAIqC,OAAO8B,GAENlE,EAAI,EAvBX,aAuBcA,EAAIyC,EAAMa,GAvBxB,kCAwBUvD,EAAIwE,IAAIjB,EAAQtD,EAAGoE,EAAUpE,IAxBvC,UAuBiCA,EAvBjC,wBA2BED,EAAIqC,OAAOkB,GACXvD,EAAIqC,OAAOK,EAAM,GA5BnB,6C,sBCfe,SAAe+B,EAA9B,kC,4CAAe,WAAkCzE,GAAlC,SAAA6C,EAAA,sEACP6B,EAAmB1E,EAAK,EAAGA,EAAIgD,YAAc,GADtC,4C,+BAIA0B,E,kFAAf,WAAkC1E,EAAKuD,EAAOb,GAA9C,eAAAG,EAAA,2DACMU,EAAQb,GADd,iCAE6Bc,EAAUxD,EAAKuD,EAAOb,GAFnD,cAEUiC,EAFV,gBAIUD,EAAmB1E,EAAKuD,EAAOoB,EAAW,GAAK,GAJzD,uBAKUD,EAAmB1E,EAAK2E,EAAW,GAAK,EAAGA,EAAW,GAAK,GALrE,wBAMUD,EAAmB1E,EAAK2E,EAAW,GAAK,EAAGjC,GANrD,6C,+BAUec,E,kFAAf,WAAyBxD,EAAKuD,EAAOb,GAArC,yBAAAG,EAAA,sEACa7C,EAAIiD,QAAQM,EAAOb,GADhC,sBAC0C,IAD1C,qCAEU1C,EAAIkD,KAAKK,EAAOb,GAF1B,cAKE1C,EAAIyB,SAAS8B,EAAOb,EAAK,UAL3B,SAOuB1C,EAAI0D,IAAIH,GAP/B,cAOQqB,EAPR,iBAQuB5E,EAAI0D,IAAIhB,GAR/B,QAQQmC,EARR,OAUM5E,EAAIsD,EAAQ,EACZnD,EAAIsC,EAAM,EACVoC,EAAOvB,EAAQ,EAEnBvD,EAAI4D,aAAa3D,EAAG,SACpBD,EAAI4D,aAAaxD,EAAG,SAftB,aAiBS0E,GAAQ1E,GAjBjB,kCAkBwBJ,EAAI0D,IAAIoB,GAlBhC,cAkBQC,EAlBR,QAmBkBH,GAnBlB,kCAoBY5E,EAAIkD,KAAK4B,EAAM7E,KApB3B,QAqBMD,EAAI8D,cAAc7D,EAAI,EAAGA,GArB/B,6BAsBe8E,GAAWF,GAtB1B,0CAuBoB7E,EAAI6D,oBAAoBzD,EAAGyE,GAvB/C,4BAuB4D,IAvB5D,iCAuBiEC,EAAO1E,EAvBxE,kCAwBQA,IACAJ,EAAI8D,cAAc1D,EAAI,EAAGA,GAzBjC,yCA4BYJ,EAAIkD,KAAK4B,EAAM1E,KA5B3B,eA6BMJ,EAAI8D,cAAc1D,EAAI,EAAGA,GA7B/B,UA+BiBJ,EAAI6D,oBAAoBiB,EAAMF,GA/B/C,6BA+B6D,EA/B7D,8CAgCc5E,EAAIkD,KAAK4B,EAAM7E,KAhC7B,QAiCQD,EAAI8D,cAAc7D,EAAI,EAAGA,GAjCjC,QAoCI6E,IApCJ,+BAsCE7E,IACAG,IACAJ,EAAIgE,YAxCN,UAyCQhE,EAAIkD,KAAKK,EAAOtD,GAzCxB,yBA0CQD,EAAIkD,KAAKR,EAAKtC,GA1CtB,iCA2CS,CAACH,EAAGG,IA3Cb,6C,sBCde,SAAe4E,EAA9B,kC,4CAAe,WAA6BhF,GAA7B,uBAAA6C,EAAA,sDACT/F,EAASkD,EAAIgD,YAER/C,EAAI,EAHA,YAGGA,EAAInD,GAHP,wBAIP4C,EAAMO,EAJC,SAKQD,EAAI0D,IAAIhE,GALhB,OAKPuF,EALO,OAMXjF,EAAI4D,aAAalE,EAAK,UACbU,EAAIH,EAPF,YAOKG,EAAItD,GAPT,kCAQEkD,EAAI6D,oBAAoBzD,EAAG6E,GAR7B,6BAQ2C,EAR3C,oCASPjF,EAAI8D,cAAcpE,EAAKU,GACvBV,EAAMU,EAVC,UAWQJ,EAAI0D,IAAItD,GAXhB,QAWP6E,EAXO,eAOiB7E,IAPjB,wCAeLJ,EAAIkD,KAAKjD,EAAGP,GAfP,QAgBXM,EAAIqC,OAAO3C,GAhBA,QAGeO,IAHf,4D,0BC+NAiF,E,kDAhNb,aAAe,IAAD,uBACZ,gBA0CFC,aAAe,WACb,IAAMC,EAAsB,EAAKA,oBAAoBC,KAAzB,gBACtBC,EAAa,EAAKC,MAAMD,WACxBnI,EAAS,GAAK,EAAKoI,MAAMD,WAAWxI,OAAS,KAEnD,OAAOwI,EAAWvI,KAAI,SAACyI,EAAWvI,GAChC,OACE,4BACE,kBAAC,EAAD,CACEM,IAAKN,EACLA,MAAOA,EACPE,OAAQA,EACRR,MAAO6I,EAAU7I,MACjBC,WAAY4I,EAAU5I,WACtB4B,iBAAkBgH,EAAUhH,iBAC5BH,YAAa+G,SA1DT,EAiEdlG,YAjEc,sBAiEA,8BAAA2D,EAAA,sDACJyC,EAAe,EAAKC,MAApBD,WACFxE,EAAY,CAChBC,SAAU,EAAKA,SAASsE,KAAd,gBACVrE,SAAU,EAAKA,SAASqE,KAAd,gBACVpE,cAAe,EAAKA,cAAcoE,KAAnB,gBACfnE,aAAc,EAAKA,aAAamE,KAAlB,iBAGhB,EAAKI,SAAS,CAAExG,YAAY,IAE5BqG,EAAWI,QAAX,+BAAA7C,EAAA,MAAmB,WAAO2C,EAAWvI,GAAlB,eAAA4F,EAAA,sDACX8C,EAAM,IAAI9E,EAAoB2E,EAAU7I,MAAO6I,EAAU5I,WAAYK,EAAO6D,GADjE,KAGT0E,EAAUhH,iBAHD,OAIV,WAJU,OAOV,cAPU,OAUV,cAVU,QAaV,UAbU,QAgBV,UAhBU,QAmBV,mBAnBU,wCAKPoE,EAAW+C,GALJ,0DAQPvC,EAAcuC,GARP,4DAWPX,EAAcW,GAXP,6DAcP1B,EAAU0B,GAdH,6DAiBPtC,EAAUsC,GAjBH,6DAoBPlB,EAAmBkB,GApBZ,qEAyBXA,EAAI7C,SAzBO,4CAAnB,yDAXY,2CAjEA,EAyGd/B,SAAW,WACT,OAAO,EAAKwE,MAAM/D,OA1GN,EA8GdrC,aAAe,SAACf,GAId,IAHA,IAAMwH,EAAc9F,EAAc1B,EAAEE,OAAOC,OACrC3B,EAAawE,MAAMyE,SAASzH,EAAEE,OAAOC,QAAQ8C,KAAK,SAE/CpB,EAAI,EAAGA,EAAI,EAAKsF,MAAMD,WAAWxI,OAAQmD,IAChD,EAAKgB,cAAcrE,EAAWkJ,QAAS7F,GACvC,EAAKe,SAAS4E,EAAYE,QAAS7F,IApHzB,EAwHdb,cAAgB,SAAChB,GACf,EAAKqH,SAAS,CAAEjE,MAAOpD,EAAEE,OAAOC,SAzHpB,EA4Hdc,oBAAsB,WACpB,GAAqC,IAAjC,EAAKkG,MAAMD,WAAWxI,OAAc,CACtC,IAAMiJ,EAAY,EAAKR,MAAMD,WAC7BS,EAAU7F,KAAK,EAAK8F,4BACpB,EAAKP,SAAS,CACZQ,OAAQF,QAEL,CACL,IAAMA,EAAY,EAAKR,MAAMD,WAC7BS,EAAUG,MACV,EAAKT,SAAS,CAAEQ,OAAQF,MAtId,EA0Id/E,SAAW,SAACrE,EAAOwJ,GACjB,EAAKV,UAAS,SAACF,GAAD,MAAY,CACxBD,WAAYC,EAAMD,WAAWvI,KAAI,SAACyI,EAAWvI,GAC3C,OAAIA,IAAUkJ,EACL,2BAAKX,GAAZ,IAAuB7I,MAAOA,IAEvB,eAAK6I,WAhJN,EAsJdvE,cAAgB,SAACrE,EAAYuJ,GAC3B,EAAKV,UAAS,SAACF,GAAD,MAAY,CACxBD,WAAYC,EAAMD,WAAWvI,KAAI,SAACyI,EAAWvI,GAC3C,OAAIA,IAAUkJ,EACL,2BAAKX,GAAZ,IAAuB5I,WAAYA,IAE5B,eAAK4I,WA5JN,EAkKdJ,oBAAsB,SAACgB,EAAUD,GAC/B,EAAKV,UAAS,SAACF,GAAD,MAAY,CACxBD,WAAYC,EAAMD,WAAWvI,KAAI,SAACyI,EAAWvI,GAC3C,OAAIA,IAAUkJ,EACL,2BAAKX,GAAZ,IAAuBhH,iBAAkB4H,IAElC,eAAKZ,WAxKN,EA8KdtE,aAAe,SAACzC,EAAW0H,GACzB,EAAKV,UAAS,SAACF,GAAD,MAAY,CACxBD,WAAYC,EAAMD,WAAWvI,KAAI,SAACyI,EAAWvI,GAC3C,OAAIA,IAAUkJ,EACL,2BAAKX,GAAZ,IAAuB/G,UAAWA,IAE3B,eAAK+G,UAKlB,IAAIa,GAAkB,EAEtB,EAAKd,MAAMD,WAAWI,SAAQ,SAACF,IACD,IAAxBA,EAAU/G,YACZ4H,GAAkB,MAItB,EAAKZ,SAAS,CAAExG,WAAYoH,KAjMhB,EAoMdL,yBAA2B,WACzB,IAAMM,EAAY,EAAKf,MAAMD,WAAW,GAAG3I,MAAMmJ,QACjD,MAAO,CACLnJ,MAAO2J,EACP1J,WAAYwE,MAAMkF,EAAUxJ,QAAQuE,KAAK,SACzC7C,iBAAkB,SAClBC,WAAW,IA1MD,OAIZ,EAAK8G,MAAQ,CACXxG,YAHkB,IAIlBC,aAHmB,GAInBwC,MAJmB,GAKnBvC,YAAY,EACZqG,WAAY,CACV,CACE3I,MAAOmD,EATO,KAUdlD,WAAYwE,MAVE,KAUiBC,KAAK,SACpC7C,iBAAkB,SAClBC,WAAW,KAdL,E,qDAoBJ,IACAS,EAAkEzB,KAAlEyB,YAAaC,EAAqD1B,KAArD0B,aAAcC,EAAuC3B,KAAvC2B,cAAeC,EAAwB5B,KAAxB4B,oBAD3C,EAE2C5B,KAAK8H,MAA/CxG,EAFD,EAECA,YAAaC,EAFd,EAEcA,aAAcC,EAF5B,EAE4BA,WAEnC,OACE,yBAAKzB,UAAU,8BACb,yBAAK8B,GAAG,QAAQ9B,UAAU,eACxB,6DAEF,kBAAC,EAAD,CACEuB,YAAaA,EACbC,aAAcA,EACdC,WAAYA,EACZC,YAAaA,EAAYmG,KAAK5H,MAC9B0B,aAAcA,EAAakG,KAAK5H,MAChC2B,cAAeA,EAAciG,KAAK5H,MAClC4B,oBAAqBA,EAAoBgG,KAAK5H,QAEhD,4BAAKA,KAAK0H,qB,GAvCOxH,aCFV4I,MARf,WACE,OACE,yBAAK/I,UAAU,OACb,kBAAC,EAAD,QCKcgJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN3I,IAAS4I,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5409a8f0.chunk.js","sourcesContent":["import React, { Component, PureComponent } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./styles/Histogram.css\";\r\n\r\nclass Histogram extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"Histogram container-fluid\">\r\n        {this.createBarList(this.props.array, this.props.colorArray)}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  createBarList = (array, colorArray) => {\r\n    const width = 100 / array.length;\r\n    const length = array.length;\r\n    return array.map((element, index) => {\r\n      return this.createBar(element / length, colorArray[index], width, index);\r\n    });\r\n  };\r\n\r\n  createBar = (height, color, width, index) => {\r\n    const styles = {\r\n      height: height * 100 + \"%\",\r\n      width: width + \"%\",\r\n      backgroundColor: color,\r\n    };\r\n\r\n    return (\r\n      <li>\r\n        <Bar key={height + color + index + width} styles={styles}></Bar>\r\n      </li>\r\n    );\r\n  };\r\n}\r\n\r\nclass Bar extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.styles != nextProps.styles) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"Bar\" style={this.props.styles}></div>;\r\n  }\r\n}\r\n\r\nexport default Histogram;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass SortTypeDropDown extends Component {\r\n  componentDidMount() {\r\n    ReactDOM.findDOMNode(this).addEventListener(\"change\", (e) =>\r\n      this.props.setSortType(e.target.value, this.props.index)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { selectedSortType, isSorting, index } = this.props;\r\n\r\n    return (\r\n      <form disabled={isSorting}>\r\n        <select name={\"sort-drp-down-\" + index}>\r\n          <option value=\"bubble\" selected={\"bubble\" === selectedSortType}>\r\n            Bubble\r\n          </option>\r\n          <option value=\"insertion\" selected={\"insertion\" === selectedSortType}>\r\n            Insertion\r\n          </option>\r\n          <option value=\"selection\" selected={\"selection\" === selectedSortType}>\r\n            Selection\r\n          </option>\r\n          <option value=\"merge\" selected={\"merge\" === selectedSortType}>\r\n            Merge\r\n          </option>\r\n          <option value=\"quick\" selected={\"quick\" === selectedSortType}>\r\n            Quick\r\n          </option>\r\n          <option\r\n            value=\"dualpivotquick\"\r\n            selected={\"dualpivotquick\" === selectedSortType}\r\n          >\r\n            Quick (dual pivot)\r\n          </option>\r\n        </select>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortTypeDropDown;\r\n","import React, { Component } from \"react\";\r\nimport Histogram from \"./Histogram\";\r\nimport \"./styles/Panel.css\";\r\nimport SortTypeDropDown from \"./SortTypeDropDown\";\r\n\r\nfunction Panel(props) {\r\n\r\n  return (\r\n    <div className=\"Panel\" style={{ height: props.height }}>\r\n      <SortTypeDropDown\r\n        index={props.index}\r\n        isSorting={props.isSorting}\r\n        selectedSortType={props.selectedSortType}\r\n        setSortType={props.setSortType}\r\n      ></SortTypeDropDown>\r\n      <Histogram array={props.array} colorArray={props.colorArray} ></Histogram>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Panel;\r\n","import React from \"react\";\r\nimport \"./styles/ConfigBanner.css\";\r\n\r\nfunction ConfigBanner(props) {\r\n  const { initialSize, initialDelay, areSorting, onClickSort, onChangeSize, onChangeDelay, onToggleSecondArray } = props;\r\n  return (\r\n    <div className=\"ConfigBanner\">\r\n      <text>Size: </text>\r\n      <input\r\n        id=\"size-slider\"\r\n        onChange={onChangeSize}\r\n        defaultValue={initialSize}\r\n        type=\"range\"\r\n        min=\"8\"\r\n        max=\"256\"\r\n        disabled={areSorting}\r\n      ></input>\r\n      <text>Speed: </text>\r\n      <input\r\n        id=\"speed-slider\"\r\n        defaultValue={initialDelay}\r\n        onMouseUp={onChangeDelay}\r\n        type=\"range\"\r\n        min=\"0\"\r\n        max=\"500\"\r\n      ></input>\r\n      <button onClick={onClickSort} disabled={areSorting}>\r\n        Sort\r\n      </button>\r\n      <button onClick={onToggleSecondArray} disabled={areSorting}>\r\n        Toggle Second Array\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfigBanner;\r\n","function shuffledArray(size) {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    arr.push(i);\r\n  }\r\n\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    let tmp = arr[i];\r\n    let j = Math.floor(Math.random() * i);\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nfunction reverseSortedArray(size) {\r\n  let arr = [];\r\n\r\n  for (let i = size - 1; i >= 0; i--) {\r\n    arr.push(i);\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport { shuffledArray, reverseSortedArray };\r\n","export function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function swap(arr, i, j) {\r\n  let tmp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = tmp;\r\n}\r\n\r\nexport function colorPair(colArr, col, i, j) {\r\n  colArr[i] = col;\r\n  colArr[j] = col;\r\n}\r\n\r\nexport function colorSection(colArr, col, firstIndex, lastIndex) {\r\n  for (let i = firstIndex; i <= lastIndex; i++) {\r\n    colArr[i] = col;\r\n  }\r\n}\r\n","import { sleep } from \"../util/sortutil\";\r\n\r\nclass ArrayViewController {\r\n  constructor(array, colorArray, index, callbacks) {\r\n    this.array = array;\r\n    this.colorArray = colorArray;\r\n    this.length = array.length;\r\n    this.index = index;\r\n    this.getDelay = callbacks.getDelay;\r\n    this.setArray = callbacks.setArray;\r\n    this.setColorArray = callbacks.setColorArray;\r\n    this.setIsSorting = callbacks.setIsSorting;\r\n\r\n    this.trackArray = Array(array.length).fill(false);\r\n  }\r\n\r\n  // Getters\r\n\r\n  getArray() {\r\n    return this.array;\r\n  }\r\n\r\n  getColorArray() {\r\n    return this.colorArray;\r\n  }\r\n\r\n  getLength() {\r\n    return this.array.length;\r\n  }\r\n\r\n  async get(i, color = \"red\") {\r\n    const prevColor = this.colorArray[i];\r\n    this.mark(i, color);\r\n    await this.delay();\r\n    this.mark(i, prevColor);\r\n    return this.array[i];\r\n  }\r\n\r\n  async compare(i, j, color = \"red\") {\r\n    this.markPair(i, j, color);\r\n    await this.delay(2);\r\n    this.unmarkPair(i, j);\r\n\r\n    const leftVal = this.array[i];\r\n    const rightVal = this.array[j];\r\n\r\n    if (leftVal === rightVal) {\r\n      return 0;\r\n    } else if (leftVal > rightVal) {\r\n      return 1;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  async compareElementToVal(i, val, color = \"red\") {\r\n    const prevColor = this.colorArray[i];\r\n    this.mark(i, color);\r\n    await this.delay();\r\n    this.mark(i, prevColor);\r\n    const elementVal = this.array[i];\r\n\r\n    if (elementVal === val) {\r\n      return 0;\r\n    } else if (elementVal > val) {\r\n      return 1;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  // delay to be applied to async array manipulations\r\n  async delay(multiplier = 1) {\r\n    await sleep(this.getDelay() * multiplier);\r\n  }\r\n\r\n  // Array manipulations. Each array read and write are delayed by one unit\r\n  async set(i, val, color = \"red\") {\r\n    const { array, colorArray, setArray, index } = this;\r\n    const prevColor = colorArray[i];\r\n    this.mark(i, color);\r\n    array[i] = val;\r\n    setArray(array, index);\r\n    await this.delay();\r\n    this.mark(i, prevColor);\r\n  }\r\n\r\n  async swap(i, j, color = \"blue\") {\r\n    if (i === j) return;\r\n    const { array, colorArray, setArray, index } = this;\r\n\r\n    const iprev = colorArray[i];\r\n    const jprev = colorArray[j];\r\n\r\n    this.markPair(i, j, color);\r\n\r\n    let tmp = array[i];\r\n    await this.delay();\r\n    array[i] = array[j];\r\n    setArray(array, index);\r\n    await this.delay(2);\r\n    array[j] = tmp;\r\n    setArray(array, index);\r\n    await this.delay();\r\n\r\n    this.mark(i, iprev);\r\n    this.mark(j, jprev);\r\n\r\n    const tArr = this.trackArray;\r\n    if (tArr[i] || tArr[j]) {\r\n      this.swapColors(i, j);\r\n      this.swapTracking(i, j);\r\n    }\r\n  }\r\n\r\n  // Array color manipulations. These operations are not delayed\r\n  mark(i, color = \"red\") {\r\n    const { colorArray, setColorArray, index } = this;\r\n    colorArray[i] = color;\r\n    setColorArray(colorArray, index);\r\n  }\r\n\r\n  markPair(i, j, color = \"red\") {\r\n    this.mark(i, color);\r\n    this.mark(j, color);\r\n  }\r\n\r\n  unmarkPair(i, j) {\r\n    this.mark(i, \"white\");\r\n    this.mark(j, \"white\");\r\n  }\r\n\r\n  markSorted(i) {\r\n    this.mark(i, \"green\");\r\n  }\r\n\r\n  unmark(i) {\r\n    this.mark(i, \"white\");\r\n  }\r\n\r\n  track(i, color) {\r\n    this.trackArray[i] = true;\r\n    this.mark(i, color);\r\n  }\r\n\r\n  untrack(i) {\r\n    this.trackArray[i] = false;\r\n    this.unmark(i);\r\n  }\r\n\r\n  swapColors(i, j) {\r\n    const cArr = this.colorArray;\r\n    const tmp = cArr[i];\r\n    cArr[i] = cArr[j];\r\n    cArr[j] = tmp;\r\n    this.setColorArray(cArr, this.index);\r\n  }\r\n\r\n  swapTracking(i, j) {\r\n    const tArr = this.trackArray;\r\n    const tmp = tArr[i];\r\n    tArr[i] = tArr[j];\r\n    tArr[j] = tmp;\r\n  }\r\n\r\n  trackPointer(i, color) {\r\n    this.mark(i, color);\r\n  }\r\n\r\n  updatePointer(oldIndex, newIndex) {\r\n    this.swapColors(oldIndex, newIndex);\r\n  }\r\n\r\n  untrackPointer(i) {\r\n    this.unmark(i);\r\n  }\r\n\r\n  unmarkAll() {\r\n    const { colorArray, setColorArray, length, index } = this;\r\n    for (let i = 0; i < length; i++) {\r\n      colorArray[i] = \"white\";\r\n    }\r\n    setColorArray(colorArray, index);\r\n  }\r\n\r\n  unmarkAllNonSorted() {\r\n    const { colorArray, setColorArray, length, index } = this;\r\n    for (let i = 0; i < length; i++) {\r\n      if (colorArray[i] != \"green\") {\r\n        colorArray[i] = \"white\";\r\n      }\r\n    }\r\n    setColorArray(colorArray, index);\r\n  }\r\n\r\n  markSection(begin, end, color) {\r\n    const colorArray = this.colorArray;\r\n    for (let i = begin; i <= end; i++) {\r\n      colorArray[i] = color;\r\n    }\r\n\r\n    this.setColorArray(colorArray, this.index);\r\n  }\r\n\r\n  async sorted() {\r\n    for (let i = 0; i < 3; i++) {\r\n      this.markSection(0, this.array.length - 1, \"green\");\r\n      await sleep(250);\r\n      this.markSection(0, this.array.length - 1, \"white\");\r\n      await sleep(250);\r\n    }\r\n    this.setIsSorting(false, this.index);\r\n  }\r\n}\r\n\r\nexport default ArrayViewController;\r\n","export default async function bubblesort(arr) {\r\n  let sorted = false;\r\n  let lastSortedIndex = arr.getLength();\r\n\r\n  while (!sorted) {\r\n    sorted = true;\r\n\r\n    for (let i = 0; i < lastSortedIndex - 1; i++) {\r\n      if ((await arr.compare(i, i + 1)) === 1) {\r\n        await arr.swap(i, i + 1);\r\n        sorted = false;\r\n      }\r\n    }\r\n    arr.markSorted(--lastSortedIndex);\r\n  }\r\n}\r\n","export default async function insertionsort(arr) {\r\n  const length = arr.getLength();\r\n\r\n  for (let i = 1; i < length; i++) {\r\n    let j = i;\r\n    arr.markPair(j, j - 1);\r\n\r\n    while ((await arr.compare(j, j - 1)) === -1 && j > 0) {\r\n      await arr.swap(j, j - 1);\r\n      j--;\r\n    }\r\n  }\r\n}\r\n","export default async function quicksort(arr) {\r\n  await quickSort(arr, 0, arr.getLength() - 1);\r\n}\r\n\r\nasync function quickSort(arr, start, end) {\r\n  if (start < end) {\r\n    let partitionIndex = await partition(arr, start, end);\r\n\r\n    await quickSort(arr, start, partitionIndex - 1);\r\n    await quickSort(arr, partitionIndex + 1, end);\r\n  }\r\n}\r\n\r\nasync function partition(arr, start, end) {\r\n  const pivot = await arr.get(end);\r\n\r\n  // mark pivot element\r\n  arr.mark(end, \"yellow\");\r\n\r\n  // initialize L and R pointers\r\n  let i = start;\r\n  let j = start;\r\n\r\n  arr.trackPointer(i, \"purple\");\r\n\r\n  // scan for elements smaller than pivot with right pointer and place infront of left pointer, then increment left pointer\r\n  while (j < end) {\r\n    if ((await arr.compareElementToVal(j, pivot)) === -1) {\r\n      await arr.swap(i++, j, \"purple\");\r\n      arr.updatePointer(i - 1, i);\r\n    }\r\n    j++;\r\n  }\r\n\r\n  arr.untrackPointer(i);\r\n\r\n  // unmark pivot and swap with final partition boundary\r\n  arr.unmarkAll();\r\n  await arr.swap(i, end);\r\n  return i;\r\n}\r\n","export default async function mergesort(arr) {\r\n  await mergeSort(arr, 0, arr.getLength());\r\n}\r\n\r\nasync function mergeSort(arr, start, end) {\r\n  if (start + 1 < end) {\r\n    const mid = Math.floor((start + end) / 2);\r\n\r\n    await mergeSort(arr, start, mid);\r\n    await mergeSort(arr, mid, end);\r\n\r\n    await merge(arr, start, mid, end);\r\n  }\r\n}\r\n\r\nasync function merge(arr, start, mid, end) {\r\n  arr.mark(start, \"yellow\");\r\n  arr.mark(mid, \"purple\");\r\n  arr.mark(end - 1, \"yellow\");\r\n\r\n  const shadowArr = [];\r\n\r\n  let i = start,\r\n    j = mid;\r\n\r\n  while (i < mid && j < end) {\r\n    const vali = await arr.get(i),\r\n      valj = await arr.get(j);\r\n\r\n    shadowArr.push(vali < valj ? vali : valj);\r\n    vali < valj ? i++ : j++;\r\n  }\r\n\r\n  while (i < mid) shadowArr.push(await arr.get(i++));\r\n  while (j < end) shadowArr.push(await arr.get(j++));\r\n\r\n  arr.unmark(mid);\r\n\r\n  for (i = 0; i < end - start; ++i) {\r\n    await arr.set(start + i, shadowArr[i]);\r\n  }\r\n\r\n  arr.unmark(start);\r\n  arr.unmark(end - 1);\r\n}\r\n","export default async function dualpivotquicksort(arr) {\r\n  await dualPivotQuickSort(arr, 0, arr.getLength() - 1);\r\n}\r\n\r\nasync function dualPivotQuickSort(arr, start, end) {\r\n  if (start < end) {\r\n    const partitions = await partition(arr, start, end);\r\n\r\n    await dualPivotQuickSort(arr, start, partitions[0] - 1);\r\n    await dualPivotQuickSort(arr, partitions[0] + 1, partitions[1] - 1);\r\n    await dualPivotQuickSort(arr, partitions[1] + 1, end);\r\n  }\r\n}\r\n\r\nasync function partition(arr, start, end) {\r\n  if ((await arr.compare(start, end)) === 1) {\r\n    await arr.swap(start, end);\r\n  }\r\n\r\n  arr.markPair(start, end, \"yellow\");\r\n\r\n  const lpivot = await arr.get(start);\r\n  const rpivot = await arr.get(end);\r\n\r\n  let i = start + 1;\r\n  let j = end - 1;\r\n  let curr = start + 1;\r\n\r\n  arr.trackPointer(i, \"green\");\r\n  arr.trackPointer(j, \"green\");\r\n\r\n  while (curr <= j) {\r\n    let currVal = await arr.get(curr);\r\n    if (currVal < lpivot) {\r\n      await arr.swap(curr, i++);\r\n      arr.updatePointer(i - 1, i);\r\n    } else if (currVal >= rpivot) {\r\n      while ((await arr.compareElementToVal(j, rpivot)) === 1 && curr < j) {\r\n        j--;\r\n        arr.updatePointer(j + 1, j);\r\n      }\r\n\r\n      await arr.swap(curr, j--);\r\n      arr.updatePointer(j + 1, j);\r\n\r\n      if ((await arr.compareElementToVal(curr, lpivot)) === -1) {\r\n        await arr.swap(curr, i++);\r\n        arr.updatePointer(i - 1, i);\r\n      }\r\n    }\r\n    curr++;\r\n  }\r\n  i--;\r\n  j++;\r\n  arr.unmarkAll();\r\n  await arr.swap(start, i);\r\n  await arr.swap(end, j);\r\n  return [i, j];\r\n}\r\n","export default async function selectionsort(arr) {\r\n  let length = arr.getLength();\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    let min = i;\r\n    let minVal = await arr.get(min);\r\n    arr.trackPointer(min, \"purple\");\r\n    for (let j = i; j < length; j++) {\r\n      if ((await arr.compareElementToVal(j, minVal)) === -1) {\r\n        arr.updatePointer(min, j);\r\n        min = j;\r\n        minVal = await arr.get(j);\r\n      }\r\n    }\r\n\r\n    await arr.swap(i, min);\r\n    arr.unmark(min);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/SortVizApp.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Panel from \"./Panel\";\r\nimport ConfigBanner from \"./ConfigBanner\";\r\nimport { shuffledArray } from \"../util/arrayGeneration\";\r\nimport ArrayViewController from \"../module/ArrayViewController\";\r\nimport bubblesort from \"../algorithms/bubblesort\"\r\nimport insertionsort from \"../algorithms/insertionsort\";\r\nimport quicksort from \"../algorithms/quicksort\"\r\nimport mergesort from \"../algorithms/mergesort\";\r\nimport dualpivotquicksort from \"../algorithms/dualpivotquicksort\";\r\nimport selectionsort from \"../algorithms/selectionsort\";\r\n\r\nclass SortVizApp extends Component {\r\n  constructor() {\r\n    super();\r\n    const initialSize = 100;\r\n    const initialDelay = 35;\r\n    this.state = {\r\n      initialSize: initialSize,\r\n      initialDelay: initialDelay,\r\n      delay: initialDelay,\r\n      areSorting: false,\r\n      arrayviews: [\r\n        {\r\n          array: shuffledArray(initialSize),\r\n          colorArray: Array(initialSize).fill(\"white\"),\r\n          selectedSortType: \"bubble\",\r\n          isSorting: false,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { onClickSort, onChangeSize, onChangeDelay, onToggleSecondArray } = this;\r\n    const { initialSize, initialDelay, areSorting } = this.state;\r\n\r\n    return (\r\n      <div className=\"SortVizApp container-fluid\">\r\n        <div id=\"title\" className=\"page-header\">\r\n          <h1>Sorting Algorithm Visualizer</h1>\r\n        </div>\r\n        <ConfigBanner\r\n          initialSize={initialSize}\r\n          initialDelay={initialDelay}\r\n          areSorting={areSorting}\r\n          onClickSort={onClickSort.bind(this)}\r\n          onChangeSize={onChangeSize.bind(this)}\r\n          onChangeDelay={onChangeDelay.bind(this)}\r\n          onToggleSecondArray={onToggleSecondArray.bind(this)}\r\n        ></ConfigBanner>\r\n        <ul>{this.createPanels()}</ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createPanels = () => {\r\n    const setSelectedSortType = this.setSelectedSortType.bind(this);\r\n    const arrayviews = this.state.arrayviews;\r\n    const height = 80 / this.state.arrayviews.length + \"vh\";\r\n\r\n    return arrayviews.map((arrayview, index) => {\r\n      return (\r\n        <li>\r\n          <Panel\r\n            key={index}\r\n            index={index}\r\n            height={height}\r\n            array={arrayview.array}\r\n            colorArray={arrayview.colorArray}\r\n            selectedSortType={arrayview.selectedSortType}\r\n            setSortType={setSelectedSortType}\r\n          ></Panel>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  onClickSort = async () => {\r\n    const { arrayviews } = this.state;\r\n    const callbacks = {\r\n      getDelay: this.getDelay.bind(this),\r\n      setArray: this.setArray.bind(this),\r\n      setColorArray: this.setColorArray.bind(this),\r\n      setIsSorting: this.setIsSorting.bind(this),\r\n    }\r\n\r\n    this.setState({ areSorting: true });\r\n\r\n    arrayviews.forEach(async (arrayview, index) => {\r\n      const avc = new ArrayViewController(arrayview.array, arrayview.colorArray, index, callbacks);\r\n      // this.setIsSorting(true, index);\r\n      switch (arrayview.selectedSortType) {\r\n        case \"bubble\":\r\n          await bubblesort(avc);\r\n          break;\r\n        case \"insertion\":\r\n          await insertionsort(avc);\r\n          break;\r\n        case \"selection\":\r\n          await selectionsort(avc);\r\n          break;\r\n        case \"merge\":\r\n          await mergesort(avc);\r\n          break;\r\n        case \"quick\":\r\n          await quicksort(avc);\r\n          break;\r\n        case \"dualpivotquick\":\r\n          await dualpivotquicksort(avc);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      await avc.sorted();\r\n    });\r\n  };\r\n\r\n  getDelay = () => {\r\n    return this.state.delay;\r\n  };\r\n\r\n  // Config callback functions to configure the sort\r\n  onChangeSize = (e) => {\r\n    const shuffledArr = shuffledArray(e.target.value);\r\n    const colorArray = Array(parseInt(e.target.value)).fill(\"white\");\r\n\r\n    for (let i = 0; i < this.state.arrayviews.length; i++) {\r\n      this.setColorArray(colorArray.slice(), i);\r\n      this.setArray(shuffledArr.slice(), i);\r\n    }\r\n  };\r\n\r\n  onChangeDelay = (e) => {\r\n    this.setState({ delay: e.target.value });\r\n  };\r\n\r\n  onToggleSecondArray = () => {\r\n    if (this.state.arrayviews.length === 1) {\r\n      const newPanels = this.state.arrayviews;\r\n      newPanels.push(this.createDefaultPanelObject());\r\n      this.setState({\r\n        panels: newPanels,\r\n      });\r\n    } else {\r\n      const newPanels = this.state.arrayviews;\r\n      newPanels.pop();\r\n      this.setState({ panels: newPanels });\r\n    }\r\n  };\r\n\r\n  setArray = (array, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, array: array };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setColorArray = (colorArray, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, colorArray: colorArray };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setSelectedSortType = (sortType, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, selectedSortType: sortType };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setIsSorting = (isSorting, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, isSorting: isSorting };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n\r\n    let areStillSorting = false;\r\n\r\n    this.state.arrayviews.forEach((arrayview) => {\r\n      if (arrayview.isSorting === true) {\r\n        areStillSorting = true;\r\n      }\r\n    });\r\n\r\n    this.setState({ areSorting: areStillSorting });\r\n  };\r\n\r\n  createDefaultPanelObject = () => {\r\n    const baseArray = this.state.arrayviews[0].array.slice();\r\n    return {\r\n      array: baseArray,\r\n      colorArray: Array(baseArray.length).fill(\"white\"),\r\n      selectedSortType: \"bubble\",\r\n      isSorting: false,\r\n    };\r\n  };\r\n\r\n}\r\n\r\nexport default SortVizApp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SortVizApp from \"./component/SortVizApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVizApp></SortVizApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}