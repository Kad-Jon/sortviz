{"version":3,"sources":["component/Histogram.jsx","component/SortTypeDropDown.jsx","component/Panel.jsx","component/ConfigBanner.jsx","util/arrayGeneration.js","util/sortutil.js","module/ArrayViewController.js","algorithms/bubblesort.js","algorithms/insertionsort.js","module/ArrayPointer.js","algorithms/quicksort.js","algorithms/mergesort.js","algorithms/dualpivotquicksort.js","algorithms/selectionsort.js","component/SortVizApp.jsx","App.js","serviceWorker.js","index.js"],"names":["Histogram","createBarList","array","colorArray","width","length","map","element","index","createBar","height","color","styles","backgroundColor","key","className","this","props","Component","Bar","nextProps","nextState","style","SortTypeDropDown","ReactDOM","findDOMNode","addEventListener","e","setSortType","target","value","selectedSortType","isSorting","disabled","name","selected","Panel","hidden","arrayAccesses","ConfigBanner","initialSize","initialDelay","areSorting","onClickSort","onChangeSize","onChangeDelay","onToggleSecondArray","id","onChange","defaultValue","type","min","max","onMouseUp","onClick","shuffledArray","size","arr","i","push","tmp","j","Math","floor","random","sleep","ms","Promise","resolve","setTimeout","ArrayViewController","callbacks","getDelay","setArray","setColorArray","setIsSorting","setArrayAccesses","pointers","multiplier","colorTrackedPointers","prevColor","mark","delay","markPair","get","leftVal","rightVal","unmarkPair","compareVals","val","elementVal","valOne","valTwo","iprev","jprev","jVal","set","begin","end","markSection","markAll","pointer","setColor","unmark","prev","splice","indexOf","forEach","untrackPointer","pop","bubblesort","a","sorted","lastSortedIndex","compare","swap","insertionsort","ArrayPointer","curr","quicksort","quickSort","start","partition","partitionIndex","pivot","trackPointer","compareToVal","increment","unmarkAll","mergesort","mergeSort","mid","merge","shadowArr","vali","valj","dualpivotquicksort","dualPivotQuickSort","partitions","lpivot","rpivot","currVal","decrement","untrackPointers","selectionsort","pointTo","minVal","SortVizApp","createPanels","setSelectedSortType","bind","arrayviews","state","arrayview","setState","avc","shuffledArr","Array","parseInt","fill","slice","newPanels","createDefaultPanelObject","panels","viewIndex","sortType","areStillSorting","basearrayview","App","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e4299b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./styles/Histogram.css\";\r\n\r\nclass Histogram extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"Histogram container-fluid\">\r\n        {this.createBarList(this.props.array, this.props.colorArray)}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  createBarList = (array, colorArray) => {\r\n    const width = 100 / array.length;\r\n    const length = array.length;\r\n    return array.map((element, index) => {\r\n      return this.createBar(element / length, colorArray[index], width, index);\r\n    });\r\n  };\r\n\r\n  createBar = (height, color, width, index) => {\r\n    const styles = {\r\n      height: height * 100 + \"%\",\r\n      width: width + \"%\",\r\n      backgroundColor: color,\r\n    };\r\n\r\n    return (\r\n      <li>\r\n        <Bar key={height + color + index + width} styles={styles}></Bar>\r\n      </li>\r\n    );\r\n  };\r\n}\r\n\r\nclass Bar extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.styles !== nextProps.styles) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"Bar\" style={this.props.styles}></div>;\r\n  }\r\n}\r\n\r\nexport default Histogram;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass SortTypeDropDown extends Component {\r\n  componentDidMount() {\r\n    ReactDOM.findDOMNode(this).addEventListener(\"change\", (e) =>\r\n      this.props.setSortType(e.target.value, this.props.index)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { selectedSortType, isSorting, index } = this.props;\r\n\r\n    return (\r\n      <form disabled={isSorting}>\r\n        <select name={\"sort-drp-down-\" + index}>\r\n          <option value=\"bubble\" selected={\"bubble\" === selectedSortType}>\r\n            Bubble\r\n          </option>\r\n          <option value=\"insertion\" selected={\"insertion\" === selectedSortType}>\r\n            Insertion\r\n          </option>\r\n          <option value=\"selection\" selected={\"selection\" === selectedSortType}>\r\n            Selection\r\n          </option>\r\n          <option value=\"merge\" selected={\"merge\" === selectedSortType}>\r\n            Merge\r\n          </option>\r\n          <option value=\"quick\" selected={\"quick\" === selectedSortType}>\r\n            Quick\r\n          </option>\r\n          <option\r\n            value=\"dualpivotquick\"\r\n            selected={\"dualpivotquick\" === selectedSortType}\r\n          >\r\n            Quick (dual pivot)\r\n          </option>\r\n        </select>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortTypeDropDown;\r\n","import React from \"react\";\r\nimport Histogram from \"./Histogram\";\r\nimport \"./styles/Panel.css\";\r\nimport SortTypeDropDown from \"./SortTypeDropDown\";\r\n\r\nfunction Panel(props) {\r\n\r\n  return (\r\n    <div className=\"Panel\" style={{ height: props.height }}>\r\n      <SortTypeDropDown\r\n        index={props.index}\r\n        isSorting={props.isSorting}\r\n        selectedSortType={props.selectedSortType}\r\n        setSortType={props.setSortType}\r\n      ></SortTypeDropDown>\r\n      <Histogram array={props.array} colorArray={props.colorArray} ></Histogram>\r\n      <text hidden={props.arrayAccesses === 0}>Array Accesses: {props.arrayAccesses}</text>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Panel;\r\n","import React from \"react\";\r\nimport \"./styles/ConfigBanner.css\";\r\n\r\nfunction ConfigBanner(props) {\r\n  const { initialSize, initialDelay, areSorting, onClickSort, onChangeSize, onChangeDelay, onToggleSecondArray } = props;\r\n  return (\r\n    <div className=\"ConfigBanner\">\r\n      <text>Size: </text>\r\n      <input\r\n        id=\"size-slider\"\r\n        onChange={onChangeSize}\r\n        defaultValue={initialSize}\r\n        type=\"range\"\r\n        min=\"8\"\r\n        max=\"128\"\r\n        disabled={areSorting}\r\n      ></input>\r\n      <text>Speed: </text>\r\n      <input\r\n        id=\"speed-slider\"\r\n        defaultValue={initialDelay}\r\n        onMouseUp={onChangeDelay}\r\n        type=\"range\"\r\n        min=\"0\"\r\n        max=\"500\"\r\n      ></input>\r\n      <button onClick={onClickSort} disabled={areSorting}>\r\n        Sort\r\n      </button>\r\n      <button onClick={onToggleSecondArray} disabled={areSorting}>\r\n        Toggle Second Array\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfigBanner;\r\n","function shuffledArray(size) {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    arr.push(i);\r\n  }\r\n\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    let tmp = arr[i];\r\n    let j = Math.floor(Math.random() * i);\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nfunction reverseSortedArray(size) {\r\n  let arr = [];\r\n\r\n  for (let i = size - 1; i >= 0; i--) {\r\n    arr.push(i);\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport { shuffledArray, reverseSortedArray };\r\n","export function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function swap(arr, i, j) {\r\n  let tmp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = tmp;\r\n}\r\n\r\nexport function colorPair(colArr, col, i, j) {\r\n  colArr[i] = col;\r\n  colArr[j] = col;\r\n}\r\n\r\nexport function colorSection(colArr, col, firstIndex, lastIndex) {\r\n  for (let i = firstIndex; i <= lastIndex; i++) {\r\n    colArr[i] = col;\r\n  }\r\n}\r\n","import { sleep } from \"../util/sortutil\";\r\n\r\nclass ArrayViewController {\r\n  constructor(array, colorArray, index, callbacks) {\r\n    this.array = array;\r\n    this.colorArray = colorArray;\r\n    this.length = array.length;\r\n    this.index = index;\r\n    this.getDelay = callbacks.getDelay;\r\n    this.setArray = callbacks.setArray;\r\n    this.setColorArray = callbacks.setColorArray;\r\n    this.setIsSorting = callbacks.setIsSorting;\r\n    this.setArrayAccesses = callbacks.setArrayAccesses;\r\n\r\n    this.pointers = [];\r\n    this.arrayAccesses = 0;\r\n  }\r\n\r\n  // delay to be applied to async array manipulations\r\n  async delay(multiplier = 1) {\r\n    await sleep(this.getDelay() * multiplier);\r\n  }\r\n\r\n  // Animated array manipulations. Each array read and write are delayed by one unit and\r\n  // highlighted with tracked elements are refreshed before and after any manipulation\r\n\r\n  async get(i, color = \"red\") {\r\n    const { array, colorArray, setArrayAccesses, index } = this;\r\n    let { arrayAccesses } = this;\r\n\r\n    this.colorTrackedPointers();\r\n\r\n    const prevColor = colorArray[i];\r\n    this.mark(i, color);\r\n    await this.delay();\r\n    this.mark(i, prevColor);\r\n\r\n    setArrayAccesses(++arrayAccesses, index);\r\n    this.arrayAccesses = arrayAccesses;\r\n\r\n    return array[i];\r\n  }\r\n\r\n  async compare(i, j, color = \"red\") {\r\n    this.markPair(i, j, color);\r\n    const leftVal = await this.get(i, color);\r\n    const rightVal = await this.get(j, color);\r\n    this.unmarkPair(i, j);\r\n    return this.compareVals(leftVal, rightVal);\r\n  }\r\n\r\n  async compareToVal(i, val, color = \"red\") {\r\n    const elementVal = await this.get(i, color);\r\n    return this.compareVals(elementVal, val);\r\n  }\r\n\r\n  compareVals(valOne, valTwo) {\r\n    const lessThan = -1;\r\n    const equal = 0;\r\n    const moreThan = 1;\r\n\r\n    if (valOne > valTwo) return moreThan;\r\n    if (valOne < valTwo) return lessThan;\r\n    return equal;\r\n  }\r\n\r\n  async set(i, val, color = \"red\") {\r\n    const { array, setArray, colorArray, index, setArrayAccesses } = this;\r\n    let { arrayAccesses } = this;\r\n\r\n    this.colorTrackedPointers();\r\n\r\n    const prevColor = colorArray[i];\r\n    this.mark(i, color);\r\n    array[i] = val;\r\n    setArray(array, index);\r\n    await this.delay();\r\n    this.mark(i, prevColor);\r\n\r\n    setArrayAccesses(++arrayAccesses, index);\r\n    this.arrayAccesses = arrayAccesses;\r\n  }\r\n\r\n  async swap(i, j, color = \"blue\") {\r\n    if (i === j) return;\r\n    const { colorArray } = this;\r\n\r\n    this.colorTrackedPointers();\r\n\r\n    const iprev = colorArray[i];\r\n    const jprev = colorArray[j];\r\n    this.markPair(i, j, color);\r\n\r\n    const tmp = await this.get(i, color);\r\n    const jVal = await this.get(j, color);\r\n    await this.set(i, jVal, color);\r\n    await this.set(j, tmp, color);\r\n\r\n    this.mark(i, iprev);\r\n    this.mark(j, jprev);\r\n  }\r\n\r\n  // Array color manipulations. These operations are not delayed\r\n  mark(i, color = \"red\") {\r\n    const { colorArray, setColorArray, index } = this;\r\n    colorArray[i] = color;\r\n    setColorArray(colorArray, index);\r\n  }\r\n\r\n  markPair(i, j, color = \"red\") {\r\n    this.mark(i, color);\r\n    this.mark(j, color);\r\n  }\r\n\r\n  markSection(begin, end, color) {\r\n    const colorArray = this.colorArray;\r\n    for (let i = begin; i <= end; i++) {\r\n      colorArray[i] = color;\r\n    }\r\n\r\n    this.setColorArray(colorArray, this.index);\r\n  }\r\n\r\n  markAll(color) {\r\n    const { colorArray, setColorArray, length, index } = this;\r\n    for (let i = 0; i < length; i++) {\r\n      colorArray[i] = color;\r\n    }\r\n    setColorArray(colorArray, index);\r\n  }\r\n\r\n  unmark(i) {\r\n    this.mark(i, \"white\");\r\n  }\r\n\r\n  unmarkPair(i, j) {\r\n    this.mark(i, \"white\");\r\n    this.mark(j, \"white\");\r\n  }\r\n\r\n  unmarkSection(begin, end) {\r\n    this.markSection(begin, end, \"white\");\r\n  }\r\n\r\n  unmarkAll() {\r\n    this.markAll(\"white\");\r\n  }\r\n\r\n  trackPointer(pointer, color) {\r\n    pointer.setColor(color);\r\n    this.pointers.push(pointer);\r\n    this.mark(pointer, color);\r\n  }\r\n\r\n  untrackPointer(pointer) {\r\n    const pointers = this.pointers;\r\n    this.unmark(pointer);\r\n    this.unmark(pointer.prev);\r\n    pointers.splice(pointers.indexOf(pointer, 1));\r\n  }\r\n\r\n  untrackPointers(...pointers) {\r\n    pointers.forEach((pointer) => this.untrackPointer(pointer));\r\n  }\r\n\r\n  untrackAllPointers() {\r\n    this.colorTrackedPointers();\r\n    const { pointers, colorArray, setColorArray } = this;\r\n\r\n    for (let i = pointers.length - 1; i > -1; i--) {\r\n      colorArray[pointers[i]] = \"white\";\r\n      pointers.pop();\r\n    }\r\n\r\n    setColorArray(colorArray);\r\n  }\r\n\r\n  colorTrackedPointers() {\r\n    const { pointers, colorArray, setColorArray } = this;\r\n\r\n    pointers.forEach((pointer) => {\r\n      colorArray[pointer] = pointer.color;\r\n      if (pointer.prev !== -1) colorArray[pointer.prev] = \"white\";\r\n    });\r\n\r\n    setColorArray(colorArray);\r\n  }\r\n\r\n  async sorted() {\r\n    for (let i = 0; i < 3; i++) {\r\n      this.markSection(0, this.array.length - 1, \"green\");\r\n      await sleep(250);\r\n      this.markSection(0, this.array.length - 1, \"white\");\r\n      await sleep(250);\r\n    }\r\n    this.setIsSorting(false, this.index);\r\n  }\r\n}\r\n\r\nexport default ArrayViewController;\r\n","export default async function bubblesort(arr) {\r\n  let sorted = false;\r\n  let lastSortedIndex = arr.length;\r\n\r\n  while (!sorted) {\r\n    sorted = true;\r\n\r\n    for (let i = 0; i < lastSortedIndex - 1; i++) {\r\n      if ((await arr.compare(i, i + 1)) === 1) {\r\n        await arr.swap(i, i + 1);\r\n        sorted = false;\r\n      }\r\n    }\r\n    lastSortedIndex--;\r\n  }\r\n}\r\n","export default async function insertionsort(arr) {\r\n  const length = arr.length;\r\n\r\n  for (let i = 1; i < length; i++) {\r\n    let j = i;\r\n    arr.markPair(j, j - 1);\r\n\r\n    while ((await arr.compare(j, j - 1)) === -1 && j > 0) {\r\n      await arr.swap(j, j - 1);\r\n      j--;\r\n    }\r\n  }\r\n}\r\n","export default class ArrayPointer {\r\n  constructor(index) {\r\n    this.curr = index;\r\n    this.prev = -1;\r\n    this.color = \"white\";\r\n  }\r\n\r\n  setColor(color) {\r\n    this.color = color;\r\n  }\r\n\r\n  increment() {\r\n    this.prev = this.curr;\r\n    this.curr = this.curr + 1;\r\n  }\r\n\r\n  decrement() {\r\n    this.prev = this.curr;\r\n    this.curr = this.curr - 1;\r\n  }\r\n\r\n  pointTo(index) {\r\n    this.prev = this.curr;\r\n    this.curr = index;\r\n  }\r\n\r\n  valueOf() {\r\n    return this.curr;\r\n  }\r\n\r\n  toString() {\r\n    return this.curr;\r\n  }\r\n}\r\n","import ArrayPointer from \"../module/ArrayPointer\";\r\n\r\nexport default async function quicksort(arr) {\r\n  await quickSort(arr, 0, arr.length - 1);\r\n}\r\n\r\nasync function quickSort(arr, start, end) {\r\n  if (start < end) {\r\n    let partitionIndex = await partition(arr, start, end);\r\n\r\n    await quickSort(arr, start, partitionIndex - 1);\r\n    await quickSort(arr, partitionIndex + 1, end);\r\n  }\r\n}\r\n\r\nasync function partition(arr, start, end) {\r\n  const pivot = await arr.get(end);\r\n\r\n  // mark pivot element\r\n  arr.mark(end, \"yellow\");\r\n\r\n  // initialize L and R pointers\r\n  let i = new ArrayPointer(start);\r\n  let j = new ArrayPointer(start);\r\n\r\n  arr.trackPointer(i, \"green\");\r\n\r\n  // scan for elements smaller than pivot with right pointer and place infront of left pointer, then increment left pointer\r\n  while (j < end) {\r\n    if ((await arr.compareToVal(j, pivot)) === -1) {\r\n      await arr.swap(i, j);\r\n      i.increment();\r\n    }\r\n    j.increment();\r\n  }\r\n\r\n  arr.untrackPointer(i);\r\n\r\n  // unmark pivot and swap with final partition boundary\r\n  arr.unmarkAll();\r\n  await arr.swap(i, end);\r\n  return i;\r\n}\r\n","export default async function mergesort(arr) {\r\n  await mergeSort(arr, 0, arr.length);\r\n}\r\n\r\nasync function mergeSort(arr, start, end) {\r\n  if (start + 1 < end) {\r\n    const mid = Math.floor((start + end) / 2);\r\n\r\n    await mergeSort(arr, start, mid);\r\n    await mergeSort(arr, mid, end);\r\n\r\n    await merge(arr, start, mid, end);\r\n  }\r\n}\r\n\r\nasync function merge(arr, start, mid, end) {\r\n  arr.mark(start, \"yellow\");\r\n  arr.mark(mid, \"purple\");\r\n  arr.mark(end - 1, \"yellow\");\r\n\r\n  const shadowArr = [];\r\n\r\n  let i = start,\r\n    j = mid;\r\n\r\n  while (i < mid && j < end) {\r\n    const vali = await arr.get(i),\r\n      valj = await arr.get(j);\r\n\r\n    shadowArr.push(vali < valj ? vali : valj);\r\n    vali < valj ? i++ : j++;\r\n  }\r\n\r\n  while (i < mid) shadowArr.push(await arr.get(i++));\r\n  while (j < end) shadowArr.push(await arr.get(j++));\r\n\r\n  arr.unmark(mid);\r\n\r\n  for (i = 0; i < end - start; ++i) {\r\n    await arr.set(start + i, shadowArr[i]);\r\n  }\r\n\r\n  arr.unmark(start);\r\n  arr.unmark(end - 1);\r\n}\r\n","import ArrayPointer from \"../module/ArrayPointer\";\r\nexport default async function dualpivotquicksort(arr) {\r\n  await dualPivotQuickSort(arr, 0, arr.length - 1);\r\n}\r\n\r\nasync function dualPivotQuickSort(arr, start, end) {\r\n  if (start < end) {\r\n    const partitions = await partition(arr, start, end);\r\n\r\n    await dualPivotQuickSort(arr, start, partitions[0] - 1);\r\n    await dualPivotQuickSort(arr, partitions[0] + 1, partitions[1] - 1);\r\n    await dualPivotQuickSort(arr, partitions[1] + 1, end);\r\n  }\r\n}\r\n\r\nasync function partition(arr, start, end) {\r\n  if ((await arr.compare(start, end)) === 1) {\r\n    await arr.swap(start, end);\r\n  }\r\n\r\n  arr.markPair(start, end, \"yellow\");\r\n\r\n  const lpivot = await arr.get(start);\r\n  const rpivot = await arr.get(end);\r\n\r\n  let i = new ArrayPointer(start + 1);\r\n  let j = new ArrayPointer(end - 1);\r\n  let curr = new ArrayPointer(start + 1);\r\n\r\n  arr.trackPointer(i, \"green\");\r\n  arr.trackPointer(j, \"green\");\r\n\r\n  while (curr <= j) {\r\n    let currVal = await arr.get(curr);\r\n    if (currVal < lpivot) {\r\n      await arr.swap(curr, i);\r\n      i.increment();\r\n    } else if (currVal >= rpivot) {\r\n      while ((await arr.compareToVal(j, rpivot)) === 1 && curr < j) {\r\n        j.decrement();\r\n      }\r\n\r\n      await arr.swap(curr, j);\r\n      j.decrement();\r\n\r\n      if ((await arr.compareToVal(curr, lpivot)) === -1) {\r\n        await arr.swap(curr, i);\r\n        i.increment();\r\n      }\r\n    }\r\n    curr.increment();\r\n  }\r\n\r\n  i.decrement();\r\n  j.increment();\r\n\r\n  arr.untrackPointers(i, j);\r\n  arr.unmarkPair(start, end);\r\n  await arr.swap(start, i, \"yellow\");\r\n  await arr.swap(end, j, \"yellow\");\r\n  return [i, j];\r\n}\r\n","import ArrayPointer from \"../module/ArrayPointer\";\r\n\r\nexport default async function selectionsort(arr) {\r\n  let length = arr.length;\r\n\r\n  let min = new ArrayPointer(0);\r\n  arr.trackPointer(min, \"purple\");\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    min.pointTo(i);\r\n\r\n    let minVal = await arr.get(min);\r\n    for (let j = i; j < length; j++) {\r\n      const currVal = await arr.get(j);\r\n      if (currVal < minVal) {\r\n        min.pointTo(j);\r\n        minVal = currVal;\r\n      }\r\n    }\r\n\r\n    await arr.swap(i, min);\r\n    arr.unmark(min);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/SortVizApp.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Panel from \"./Panel\";\r\nimport ConfigBanner from \"./ConfigBanner\";\r\nimport { shuffledArray } from \"../util/arrayGeneration\";\r\nimport ArrayViewController from \"../module/ArrayViewController\";\r\nimport bubblesort from \"../algorithms/bubblesort\"\r\nimport insertionsort from \"../algorithms/insertionsort\";\r\nimport quicksort from \"../algorithms/quicksort\"\r\nimport mergesort from \"../algorithms/mergesort\";\r\nimport dualpivotquicksort from \"../algorithms/dualpivotquicksort\";\r\nimport selectionsort from \"../algorithms/selectionsort\";\r\n\r\nclass SortVizApp extends Component {\r\n  constructor() {\r\n    super();\r\n    const initialSize = 64;\r\n    const initialDelay = 35;\r\n    this.state = {\r\n      initialSize: initialSize,\r\n      initialDelay: initialDelay,\r\n      delay: initialDelay,\r\n      areSorting: false,\r\n      arrayviews: [\r\n        {\r\n          array: shuffledArray(initialSize),\r\n          colorArray: Array(initialSize).fill(\"white\"),\r\n          selectedSortType: \"bubble\",\r\n          isSorting: false,\r\n          arrayAccesses: 0,\r\n          size: initialSize,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { onClickSort, onChangeSize, onChangeDelay, onToggleSecondArray } = this;\r\n    const { initialSize, initialDelay, areSorting } = this.state;\r\n\r\n    return (\r\n      <div className=\"SortVizApp container-fluid\">\r\n        <div id=\"title\" className=\"page-header\">\r\n          <h1>Sorting Algorithm Visualizer</h1>\r\n        </div>\r\n        <ConfigBanner\r\n          initialSize={initialSize}\r\n          initialDelay={initialDelay}\r\n          areSorting={areSorting}\r\n          onClickSort={onClickSort.bind(this)}\r\n          onChangeSize={onChangeSize.bind(this)}\r\n          onChangeDelay={onChangeDelay.bind(this)}\r\n          onToggleSecondArray={onToggleSecondArray.bind(this)}\r\n        ></ConfigBanner>\r\n        <ul>{this.createPanels()}</ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createPanels = () => {\r\n    const setSelectedSortType = this.setSelectedSortType.bind(this);\r\n    const arrayviews = this.state.arrayviews;\r\n    const height = 80 / this.state.arrayviews.length + \"vh\";\r\n\r\n    return arrayviews.map((arrayview, index) => {\r\n      return (\r\n        <li>\r\n          <Panel\r\n            key={index}\r\n            index={index}\r\n            height={height}\r\n            array={arrayview.array}\r\n            colorArray={arrayview.colorArray}\r\n            selectedSortType={arrayview.selectedSortType}\r\n            arrayAccesses={arrayview.arrayAccesses}\r\n            setSortType={setSelectedSortType}\r\n          ></Panel>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  onClickSort = async () => {\r\n    const { arrayviews } = this.state;\r\n    const callbacks = {\r\n      getDelay: this.getDelay.bind(this),\r\n      setArray: this.setArray.bind(this),\r\n      setColorArray: this.setColorArray.bind(this),\r\n      setArrayAccesses: this.setArrayAccesses.bind(this),\r\n      setIsSorting: this.setIsSorting.bind(this),\r\n    }\r\n\r\n    this.setState({ areSorting: true });\r\n\r\n    arrayviews.forEach(async (arrayview, index) => {\r\n      const avc = new ArrayViewController(arrayview.array, arrayview.colorArray, index, callbacks);\r\n      // this.setIsSorting(true, index);\r\n      switch (arrayview.selectedSortType) {\r\n        case \"bubble\":\r\n          await bubblesort(avc);\r\n          break;\r\n        case \"insertion\":\r\n          await insertionsort(avc);\r\n          break;\r\n        case \"selection\":\r\n          await selectionsort(avc);\r\n          break;\r\n        case \"merge\":\r\n          await mergesort(avc);\r\n          break;\r\n        case \"quick\":\r\n          await quicksort(avc);\r\n          break;\r\n        case \"dualpivotquick\":\r\n          await dualpivotquicksort(avc);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      await avc.sorted();\r\n    });\r\n  };\r\n\r\n  getDelay = () => {\r\n    return this.state.delay;\r\n  };\r\n\r\n  // Config callback functions to configure the sort\r\n  onChangeSize = (e) => {\r\n    const shuffledArr = shuffledArray(e.target.value);\r\n    const colorArray = Array(parseInt(e.target.value)).fill(\"white\");\r\n\r\n    for (let i = 0; i < this.state.arrayviews.length; i++) {\r\n      this.setColorArray(colorArray.slice(), i);\r\n      this.setArray(shuffledArr.slice(), i);\r\n    }\r\n  };\r\n\r\n  onChangeDelay = (e) => {\r\n    this.setState({ delay: e.target.value });\r\n  };\r\n\r\n  onToggleSecondArray = () => {\r\n    if (this.state.arrayviews.length === 1) {\r\n      const newPanels = this.state.arrayviews;\r\n      newPanels.push(this.createDefaultPanelObject());\r\n      this.setState({\r\n        panels: newPanels,\r\n      });\r\n    } else {\r\n      const newPanels = this.state.arrayviews;\r\n      newPanels.pop();\r\n      this.setState({ panels: newPanels });\r\n    }\r\n  };\r\n\r\n  setArray = (array, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, array: array };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setColorArray = (colorArray, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, colorArray: colorArray };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setSelectedSortType = (sortType, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, selectedSortType: sortType };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setArrayAccesses = (arrayAccesses, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, arrayAccesses: arrayAccesses };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setIsSorting = (isSorting, viewIndex) => {\r\n    this.setState((state) => ({\r\n      arrayviews: state.arrayviews.map((arrayview, index) => {\r\n        if (index === viewIndex) {\r\n          return { ...arrayview, isSorting: isSorting };\r\n        } else {\r\n          return { ...arrayview };\r\n        }\r\n      }),\r\n    }));\r\n\r\n    let areStillSorting = false;\r\n\r\n    this.state.arrayviews.forEach((arrayview) => {\r\n      if (arrayview.isSorting === true) {\r\n        areStillSorting = true;\r\n      }\r\n    });\r\n\r\n    this.setState({ areSorting: areStillSorting });\r\n  };\r\n\r\n  createDefaultPanelObject = () => {\r\n    const basearrayview = this.state.arrayviews[0]\r\n    return {\r\n      array: basearrayview.array.slice(),\r\n      colorArray: basearrayview.colorArray.slice(),\r\n      selectedSortType: basearrayview.selectedSortType,\r\n      isSorting: false,\r\n      arrayAccesses: 0,\r\n    };\r\n  };\r\n\r\n}\r\n\r\nexport default SortVizApp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SortVizApp from \"./component/SortVizApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVizApp></SortVizApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}