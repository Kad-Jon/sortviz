{"version":3,"sources":["component/Histogram.jsx","component/SortTypeDropDown.jsx","component/Panel.jsx","component/ConfigBanner.jsx","util/arrayGeneration.js","util/sortutil.js","component/ArrayViewController.js","algorithms/bubble-sort.js","algorithms/insertion-sort.js","algorithms/quick-sort.js","algorithms/merge-sort.js","component/SortVizApp.jsx","App.js","serviceWorker.js","index.js"],"names":["Histogram","createBarList","array","colorArray","width","length","map","element","index","createBar","height","color","styles","backgroundColor","key","className","this","props","Component","Bar","nextProps","nextState","style","SortTypeDropDown","ReactDOM","findDOMNode","addEventListener","e","setSortType","target","value","selectedSortType","isSorting","disabled","name","selected","Panel","ConfigBanner","id","onChange","onChangeSize","defaultValue","type","min","max","onMouseUp","onChangeDelay","onClick","onClickSort","toggleSecondArray","shuffledArray","size","arr","i","push","tmp","j","Math","floor","random","sleep","ms","Promise","resolve","setTimeout","ArrayViewController","callbacks","getDelay","setArray","setColorArray","prevColor","mark","delay","markPair","unmarkPair","leftVal","rightVal","val","elementVal","multiplier","iprev","jprev","begin","end","markSection","a","sorted","lastSortedIndex","getLength","compare","swap","markSorted","bubblesort","insertionsort","quicksort","quickSort","start","partition","partitionIndex","get","pivot","compareElementToVal","unmark","mergesort","mergeSort","mid","merge","shadowArr","vali","valj","set","SortVizApp","createPanels","state","panels","panel","setSelectedSortType","bind","forEach","avc","shuffledArr","Array","parseInt","fill","slice","setState","newPanels","createDefaultPanelObject","pop","panelIndex","sortType","baseArray","App","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8ab62a9.chunk.js","sourcesContent":["import React, { Component, PureComponent } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./styles/Histogram.css\";\r\n\r\nclass Histogram extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"Histogram container-fluid\">\r\n        {this.createBarList(this.props.array, this.props.colorArray)}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  createBarList = (array, colorArray) => {\r\n    const width = 100 / array.length;\r\n    const length = array.length;\r\n    return array.map((element, index) => {\r\n      return this.createBar(element / length, colorArray[index], width, index);\r\n    });\r\n  };\r\n\r\n  createBar = (height, color, width, index) => {\r\n    const styles = {\r\n      height: height * 100 + \"%\",\r\n      width: width + \"%\",\r\n      backgroundColor: color,\r\n    };\r\n\r\n    return (\r\n      <li>\r\n        <Bar key={height + color + index + width} styles={styles}></Bar>\r\n      </li>\r\n    );\r\n  };\r\n}\r\n\r\nclass Bar extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.styles != nextProps.styles) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"Bar\" style={this.props.styles}></div>;\r\n  }\r\n}\r\n\r\nexport default Histogram;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass SortTypeDropDown extends Component {\r\n  componentDidMount() {\r\n    ReactDOM.findDOMNode(this).addEventListener(\"change\", (e) =>\r\n      this.props.setSortType(e.target.value, this.props.index)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { selectedSortType, isSorting, index } = this.props;\r\n\r\n    return (\r\n      <form disabled={isSorting}>\r\n        <select name={\"sort-drp-down-\" + index}>\r\n          <option value=\"bubble\" selected={\"bubble\" === selectedSortType}>\r\n            Bubble\r\n          </option>\r\n          <option value=\"insertion\" selected={\"insertion\" === selectedSortType}>\r\n            Insertion\r\n          </option>\r\n          <option value=\"merge\" selected={\"merge\" === selectedSortType}>\r\n            Merge\r\n          </option>\r\n          <option value=\"quick\" selected={\"quick\" === selectedSortType}>\r\n            Quick\r\n          </option>\r\n          <option\r\n            value=\"dualpivotquicksort\"\r\n            selected={\"dualpivotquicksort\" === selectedSortType}\r\n          >\r\n            Quick (dual pivot)\r\n          </option>\r\n        </select>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortTypeDropDown;\r\n","import React, { Component } from \"react\";\r\nimport Histogram from \"./Histogram\";\r\nimport \"./styles/Panel.css\";\r\nimport SortTypeDropDown from \"./SortTypeDropDown\";\r\n\r\nfunction Panel(props) {\r\n\r\n  return (\r\n    <div className=\"Panel\" style={{ height: props.height }}>\r\n      <SortTypeDropDown\r\n        index={props.index}\r\n        isSorting={props.isSorting}\r\n        selectedSortType={props.selectedSortType}\r\n        setSortType={props.setSortType}\r\n      ></SortTypeDropDown>\r\n      <Histogram array={props.array} colorArray={props.colorArray} ></Histogram>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Panel;\r\n","import React from \"react\";\r\nimport \"./styles/ConfigBanner.css\";\r\n\r\nfunction ConfigBanner(props) {\r\n  return (\r\n    <div className=\"ConfigBanner\">\r\n      <text>Size: </text>\r\n      <input\r\n        id=\"size-slider\"\r\n        onChange={props.onChangeSize}\r\n        defaultValue=\"100\"\r\n        type=\"range\"\r\n        min=\"8\"\r\n        max=\"256\"\r\n        disabled={props.isSorting}\r\n      ></input>\r\n      <text>Speed: </text>\r\n      <input\r\n        id=\"speed-slider\"\r\n        defaultValue=\"35\"\r\n        onMouseUp={props.onChangeDelay}\r\n        type=\"range\"\r\n        min=\"0\"\r\n        max=\"500\"\r\n      ></input>\r\n      <button onClick={props.onClickSort} disabled={props.isSorting}>\r\n        Sort\r\n      </button>\r\n      <button onClick={props.toggleSecondArray} disabled={props.isSorting}>\r\n        Toggle Second Array\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfigBanner;\r\n","function shuffledArray(size) {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    arr.push(i);\r\n  }\r\n\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    let tmp = arr[i];\r\n    let j = Math.floor(Math.random() * i);\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nfunction reverseSortedArray(size) {\r\n  let arr = [];\r\n\r\n  for (let i = size - 1; i >= 0; i--) {\r\n    arr.push(i);\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport { shuffledArray, reverseSortedArray };\r\n","export function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function swap(arr, i, j) {\r\n  let tmp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = tmp;\r\n}\r\n\r\nexport function colorPair(colArr, col, i, j) {\r\n  colArr[i] = col;\r\n  colArr[j] = col;\r\n}\r\n\r\nexport function colorSection(colArr, col, firstIndex, lastIndex) {\r\n  for (let i = firstIndex; i <= lastIndex; i++) {\r\n    colArr[i] = col;\r\n  }\r\n}\r\n","import { sleep } from \"../util/sortutil\";\r\n\r\nclass ArrayViewController {\r\n  constructor(array, colorArray, index, callbacks) {\r\n    this.array = array;\r\n    this.colorArray = colorArray;\r\n    this.length = array.length;\r\n    this.index = index;\r\n    this.getDelay = callbacks.getDelay;\r\n    this.setArray = callbacks.setArray;\r\n    this.setColorArray = callbacks.setColorArray;\r\n  }\r\n\r\n  // Getters\r\n\r\n  getArray() {\r\n    return this.array;\r\n  }\r\n\r\n  getColorArray() {\r\n    return this.colorArray;\r\n  }\r\n\r\n  getLength() {\r\n    return this.array.length;\r\n  }\r\n\r\n  async get(i, color = \"red\") {\r\n    const prevColor = this.colorArray[i];\r\n    this.mark(i, color);\r\n    await this.delay();\r\n    this.mark(i, prevColor);\r\n    return this.array[i];\r\n  }\r\n\r\n  async compare(i, j, color = \"red\") {\r\n    this.markPair(i, j, color);\r\n    await this.delay(2);\r\n    this.unmarkPair(i, j);\r\n\r\n    const leftVal = this.array[i];\r\n    const rightVal = this.array[j];\r\n\r\n    if (leftVal === rightVal) {\r\n      return 0;\r\n    } else if (leftVal > rightVal) {\r\n      return 1;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  async compareElementToVal(i, val, color = \"red\") {\r\n    const prevColor = this.colorArray[i];\r\n    this.mark(i, color);\r\n    await this.delay();\r\n    this.mark(i, prevColor);\r\n    const elementVal = this.array[i];\r\n\r\n    if (elementVal === val) {\r\n      return 0;\r\n    } else if (elementVal > val) {\r\n      return 1;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  // delay to be applied to async array manipulations\r\n  async delay(multiplier = 1) {\r\n    await sleep(this.getDelay() * multiplier);\r\n  }\r\n\r\n  // Array manipulations. Each array read and write are delayed by one unit\r\n  async set(i, val, color = \"red\") {\r\n    const { array, colorArray, setArray, index } = this;\r\n    const prevColor = colorArray[i];\r\n    this.mark(i, color);\r\n    array[i] = val;\r\n    setArray(array, index);\r\n    await this.delay();\r\n    this.mark(i, prevColor);\r\n  }\r\n\r\n  async swap(i, j, color = \"blue\") {\r\n    const { array, colorArray, setArray, index } = this;\r\n\r\n    const iprev = colorArray[i];\r\n    const jprev = colorArray[j];\r\n\r\n    this.markPair(i, j, color);\r\n\r\n    let tmp = array[i];\r\n    await this.delay();\r\n    array[i] = array[j];\r\n    setArray(array);\r\n    await this.delay(2);\r\n    array[j] = tmp;\r\n    setArray(array);\r\n    await this.delay();\r\n\r\n    this.mark(i, iprev);\r\n    this.mark(j, jprev);\r\n  }\r\n\r\n  // Array color manipulations. These operations are not delayed\r\n  mark(i, color = \"red\") {\r\n    const { colorArray, setColorArray, index } = this;\r\n    colorArray[i] = color;\r\n    setColorArray(colorArray, index);\r\n  }\r\n\r\n  markPair(i, j, color = \"red\") {\r\n    this.mark(i, color);\r\n    this.mark(j, color);\r\n  }\r\n\r\n  unmarkPair(i, j) {\r\n    this.mark(i, \"white\");\r\n    this.mark(j, \"white\");\r\n  }\r\n\r\n  markSorted(i) {\r\n    this.mark(i, \"green\");\r\n  }\r\n\r\n  unmark(i) {\r\n    this.mark(i, \"white\");\r\n  }\r\n\r\n  unmarkAllNonSorted() {\r\n    const { colorArray, setColorArray, length, index } = this;\r\n    for (let i = 0; i < length; i++) {\r\n      if (colorArray[i] != \"green\") {\r\n        colorArray[i] = \"white\";\r\n      }\r\n    }\r\n    this.setColorArray(colorArray, index);\r\n  }\r\n\r\n  markSection(begin, end, color) {\r\n    const colorArray = this.colorArray;\r\n    for (let i = begin; i <= end; i++) {\r\n      colorArray[i] = color;\r\n    }\r\n\r\n    this.setColorArray(this.colorArray);\r\n  }\r\n\r\n  async sorted() {\r\n    for (let i = 0; i < 3; i++) {\r\n      this.markSection(0, this.array.length - 1, \"green\");\r\n      await sleep(250);\r\n      this.markSection(0, this.array.length - 1, \"white\");\r\n      await sleep(250);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ArrayViewController;\r\n","async function bubblesort(arr) {\r\n  let sorted = false;\r\n  let lastSortedIndex = arr.getLength();\r\n\r\n  while (!sorted) {\r\n    sorted = true;\r\n\r\n    for (let i = 0; i < lastSortedIndex - 1; i++) {\r\n      if ((await arr.compare(i, i + 1)) === 1) {\r\n        await arr.swap(i, i + 1);\r\n        sorted = false;\r\n      }\r\n    }\r\n    arr.markSorted(--lastSortedIndex);\r\n  }\r\n}\r\n\r\nexport default bubblesort;\r\n","async function insertionsort(arr) {\r\n  const length = arr.getLength();\r\n\r\n  for (let i = 1; i < length; i++) {\r\n    let j = i;\r\n    arr.markPair(j, j - 1);\r\n\r\n    while ((await arr.compare(j, j - 1)) === -1 && j > 0) {\r\n      await arr.swap(j, j - 1);\r\n      j--;\r\n    }\r\n  }\r\n}\r\n\r\nexport default insertionsort;\r\n","export default async function quicksort(arr) {\r\n  await quickSort(arr, 0, arr.getLength());\r\n}\r\n\r\nasync function quickSort(arr, start, end) {\r\n  if (start + 1 < end) {\r\n    let partitionIndex = await partition(arr, start, end);\r\n\r\n    await quickSort(arr, start, partitionIndex);\r\n    await quickSort(arr, partitionIndex + 1, end);\r\n  }\r\n}\r\n\r\nasync function partition(arr, start, end) {\r\n  const pivot = await arr.get(end - 1);\r\n\r\n  // mark pivot\r\n  arr.mark(end - 1, \"yellow\");\r\n\r\n  let i = start - 1;\r\n  let j = start;\r\n\r\n  while (j < end - 1) {\r\n    if ((await arr.compareElementToVal(j, pivot)) === -1) {\r\n      i++;\r\n      await arr.swap(i, j);\r\n\r\n      // update partition boundary mark\r\n      // arr.unmark(i - 1);\r\n      // arr.mark(i, \"purple\");\r\n    }\r\n\r\n    j++;\r\n  }\r\n  arr.unmark(i);\r\n  arr.unmark(end - 1);\r\n  await arr.swap(i + 1, end - 1);\r\n  return i + 1;\r\n}\r\n","export default async function mergesort(arr) {\r\n  await mergeSort(arr, 0, arr.getLength());\r\n}\r\n\r\nasync function mergeSort(arr, start, end) {\r\n  if (start + 1 < end) {\r\n    const mid = Math.floor((start + end) / 2);\r\n\r\n    await mergeSort(arr, start, mid);\r\n    await mergeSort(arr, mid, end);\r\n\r\n    await merge(arr, start, mid, end);\r\n  }\r\n}\r\n\r\nasync function merge(arr, start, mid, end) {\r\n  arr.mark(start, \"yellow\");\r\n  arr.mark(mid, \"purple\");\r\n  arr.mark(end - 1, \"yellow\");\r\n\r\n  const shadowArr = [];\r\n\r\n  let i = start,\r\n    j = mid;\r\n\r\n  while (i < mid && j < end) {\r\n    const vali = await arr.get(i),\r\n      valj = await arr.get(j);\r\n\r\n    shadowArr.push(vali < valj ? vali : valj);\r\n    vali < valj ? i++ : j++;\r\n  }\r\n\r\n  while (i < mid) shadowArr.push(await arr.get(i++));\r\n  while (j < end) shadowArr.push(await arr.get(j++));\r\n\r\n  arr.unmark(mid);\r\n\r\n  for (i = 0; i < end - start; ++i) {\r\n    await arr.set(start + i, shadowArr[i]);\r\n  }\r\n\r\n  arr.unmark(start);\r\n  arr.unmark(end - 1);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/SortVizApp.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Panel from \"./Panel\";\r\nimport ConfigBanner from \"./ConfigBanner\";\r\nimport { shuffledArray } from \"../util/arrayGeneration\";\r\nimport ArrayViewController from \"./ArrayViewController\";\r\nimport bubblesort from \"../algorithms/bubble-sort\"\r\nimport insertionsort from \"../algorithms/insertion-sort\";\r\nimport quicksort from \"../algorithms/quick-sort\"\r\nimport mergesort from \"../algorithms/merge-sort\";\r\n\r\nclass SortVizApp extends Component {\r\n  constructor() {\r\n    super();\r\n    const initialSize = 100;\r\n    this.state = {\r\n      panels: [\r\n        {\r\n          array: shuffledArray(initialSize),\r\n          colorArray: Array(initialSize).fill(\"white\"),\r\n          selectedSortType: \"bubble\",\r\n          isSorting: false,\r\n        },\r\n      ],\r\n      delay: 35,\r\n      isSorting: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SortVizApp container-fluid\">\r\n        <div id=\"title\" className=\"page-header\">\r\n          <h1>Sorting Algorithm Visualizer</h1>\r\n        </div>\r\n        <ConfigBanner\r\n          onClickSort={this.onClickSort.bind(this)}\r\n          onChangeSize={this.onChangeSize.bind(this)}\r\n          onChangeDelay={this.onChangeDelay.bind(this)}\r\n          isSorting={this.state.isSorting}\r\n          toggleSecondArray={this.toggleSecondArray.bind(this)}\r\n        ></ConfigBanner>\r\n        <ul>{this.createPanels()}</ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createPanels = () => {\r\n\r\n    const height = 80 / this.state.panels.length + \"vh\";\r\n    return this.state.panels.map((panel, index) => {\r\n      return (\r\n        <li>\r\n          <Panel\r\n            height={height}\r\n\r\n            array={panel.array}\r\n            colorArray={panel.colorArray}\r\n\r\n            selectedSortType={panel.selectedSortType}\r\n            setSortType={this.setSelectedSortType.bind(this)}\r\n\r\n            key={index}\r\n            index={index}\r\n          ></Panel>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  onClickSort = () => {\r\n    const { panels } = this.state;\r\n    const callbacks = {\r\n      getDelay: this.getDelay.bind(this),\r\n      setArray: this.setArray.bind(this),\r\n      setColorArray: this.setColorArray.bind(this),\r\n    }\r\n\r\n    panels.forEach(async (panel, index) => {\r\n      const avc = new ArrayViewController(panel.array, panel.colorArray, index, callbacks);\r\n      switch (panel.selectedSortType) {\r\n        case \"bubble\":\r\n          await bubblesort(avc);\r\n          break;\r\n        case \"insertion\":\r\n          await insertionsort(avc);\r\n          break;\r\n        case \"quick\":\r\n          await quicksort(avc);\r\n          break;\r\n        case \"merge\":\r\n          await mergesort(avc);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      avc.sorted();\r\n    });\r\n  };\r\n\r\n  getDelay = () => {\r\n    return this.state.delay;\r\n  };\r\n\r\n  // Config callback functions to configure the sort\r\n  onChangeSize = (e) => {\r\n    const shuffledArr = shuffledArray(e.target.value);\r\n    const colorArray = Array(parseInt(e.target.value)).fill(\"white\");\r\n\r\n    for (let i = 0; i < this.state.panels.length; i++) {\r\n      this.setColorArray(colorArray.slice(), i);\r\n      this.setArray(shuffledArr.slice(), i);\r\n    }\r\n  };\r\n\r\n  onChangeDelay = (e) => {\r\n    this.setState({ delay: e.target.value });\r\n  };\r\n\r\n  toggleSecondArray = () => {\r\n    if (this.state.panels.length === 1) {\r\n      const newPanels = this.state.panels;\r\n      newPanels.push(this.createDefaultPanelObject());\r\n      this.setState({\r\n        panels: newPanels,\r\n      });\r\n    } else {\r\n      const newPanels = this.state.panels;\r\n      newPanels.pop();\r\n      this.setState({ panels: newPanels });\r\n    }\r\n  };\r\n\r\n  setArray = (array, panelIndex) => {\r\n    this.setState((state) => ({\r\n      panels: state.panels.map((panel, index) => {\r\n        if (index === panelIndex) {\r\n          return { ...panel, array: array };\r\n        } else {\r\n          return { ...panel };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setColorArray = (colorArray, panelIndex) => {\r\n    this.setState((state) => ({\r\n      panels: state.panels.map((panel, index) => {\r\n        if (index === panelIndex) {\r\n          return { ...panel, colorArray: colorArray };\r\n        } else {\r\n          return { ...panel };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setSelectedSortType = (sortType, panelIndex) => {\r\n    this.setState((state) => ({\r\n      panels: state.panels.map((panel, index) => {\r\n        if (index === panelIndex) {\r\n          return { ...panel, selectedSortType: sortType };\r\n        } else {\r\n          return { ...panel };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  createDefaultPanelObject = () => {\r\n    const baseArray = this.state.panels[0].array.slice();\r\n    return {\r\n      array: baseArray,\r\n      colorArray: Array(baseArray.length).fill(\"white\"),\r\n      selectedSortType: \"bubble\",\r\n      isSorting: false,\r\n    };\r\n  };\r\n\r\n}\r\n\r\nexport default SortVizApp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SortVizApp from \"./component/SortVizApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVizApp></SortVizApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}