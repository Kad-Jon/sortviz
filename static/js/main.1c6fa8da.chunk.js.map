{"version":3,"sources":["component/Histogram.jsx","component/SortTypeDropDown.jsx","component/Panel.jsx","component/ConfigBanner.jsx","util/arrayGeneration.js","util/sortutil.js","algorithms/bubbleSort.js","algorithms/quickSort.js","algorithms/insertionSort.js","algorithms/mergeSort.js","algorithms/dualPivotQuickSort.js","component/SortVizApp.jsx","App.js","serviceWorker.js","index.js"],"names":["Histogram","createBarList","array","colorArray","width","length","map","element","index","createBar","height","color","styles","backgroundColor","key","className","this","props","Component","Bar","nextProps","nextState","style","SortTypeDropDown","ReactDOM","findDOMNode","addEventListener","e","setSortType","target","value","selectedSortType","isSorting","disabled","name","selected","Panel","ConfigBanner","id","onChange","onChangeSize","defaultValue","type","min","max","onMouseUp","onChangeDelay","onClick","onClickSort","toggleSecondArray","shuffledArray","size","arr","i","push","tmp","j","Math","floor","random","sleep","ms","Promise","resolve","setTimeout","swap","colorPair","colArr","col","colorSection","firstIndex","lastIndex","callbacks","a","setArray","setColorArray","delay","setIsSorting","sorted","lastSortedIndex","quicksort","partition","removeColouringInPartition","start","end","pivot","pivotIndex","quickSort","mergesort","merge","copyMergeResultToOriginal","result","startIndex","isLastMerge","leftSubArray","rightSubArray","middle","colorBoundaries","shadowArray","k","l","shift","concat","slice","subArray","lCopy","rCopy","lSortedArr","rSortedArr","middleIndex","endIndex","mergeSort","dualpivotquicksort","lpivot","rpivot","curr","pivots","dualPivotQuickSort","SortVizApp","createPanels","state","panels","panel","setSelectedSortType","bind","setState","getDelay","forEach","bubbleSort","insertionSort","panelIndex","sortType","isStillSorting","shuffledArr","Array","parseInt","fill","newPanels","createDefaultPanelObject","pop","baseArray","App","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iWAIMA,G,8NASJC,cAAgB,SAACC,EAAOC,GACtB,IAAMC,EAAQ,IAAMF,EAAMG,OACpBA,EAASH,EAAMG,OACrB,OAAOH,EAAMI,KAAI,SAACC,EAASC,GACzB,OAAO,EAAKC,UAAUF,EAAUF,EAAQF,EAAWK,GAAQJ,EAAOI,O,EAItEC,UAAY,SAACC,EAAQC,EAAOP,EAAOI,GACjC,IAAMI,EAAS,CACbF,OAAiB,IAATA,EAAe,IACvBN,MAAOA,EAAQ,IACfS,gBAAiBF,GAGnB,OACE,4BACE,kBAAC,EAAD,CAAKG,IAAKJ,EAASC,EAAQH,EAAQJ,EAAOQ,OAAQA,M,uDAxBtD,OACE,wBAAIG,UAAU,6BACXC,KAAKf,cAAce,KAAKC,MAAMf,MAAOc,KAAKC,MAAMd,iB,GAJjCe,cAgClBC,E,oLACkBC,EAAWC,GAC/B,GAAIL,KAAKC,MAAML,QAAUQ,EAAUR,OACjC,OAAO,I,+BAKT,OAAO,yBAAKG,UAAU,MAAMO,MAAON,KAAKC,MAAML,a,GARhCM,aAYHlB,ICRAuB,G,wLApCQ,IAAD,OAClBC,IAASC,YAAYT,MAAMU,iBAAiB,UAAU,SAACC,GAAD,OACpD,EAAKV,MAAMW,YAAYD,EAAEE,OAAOC,MAAO,EAAKb,MAAMT,Y,+BAI5C,IAAD,EACwCQ,KAAKC,MAA5Cc,EADD,EACCA,iBAAkBC,EADnB,EACmBA,UAAWxB,EAD9B,EAC8BA,MAErC,OACE,0BAAMyB,SAAUD,GACd,4BAAQE,KAAM,iBAAmB1B,GAC/B,4BAAQsB,MAAM,SAASK,SAAU,WAAaJ,GAA9C,UAGA,4BAAQD,MAAM,YAAYK,SAAU,cAAgBJ,GAApD,aAGA,4BAAQD,MAAM,QAAQK,SAAU,UAAYJ,GAA5C,SAGA,4BAAQD,MAAM,QAAQK,SAAU,UAAYJ,GAA5C,SAGA,4BACED,MAAM,qBACNK,SAAU,uBAAyBJ,GAFrC,4B,GAzBqBb,cCgBhBkB,MAdf,SAAenB,GACb,OACE,yBAAKF,UAAU,QAAQO,MAAO,CAAEZ,OAAQO,EAAMP,SAC5C,kBAAC,EAAD,CACEF,MAAOS,EAAMT,MACbwB,UAAWf,EAAMe,UACjBD,iBAAkBd,EAAMc,iBACxBH,YAAaX,EAAMW,cAErB,kBAAC,EAAD,CAAW1B,MAAOe,EAAMf,MAAOC,WAAYc,EAAMd,e,MCqBxCkC,MAhCf,SAAsBpB,GACpB,OACE,yBAAKF,UAAU,gBACb,wCACA,2BACEuB,GAAG,cACHC,SAAUtB,EAAMuB,aAChBC,aAAa,MACbC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJX,SAAUhB,EAAMe,YAElB,yCACA,2BACEM,GAAG,eACHG,aAAa,IACbI,UAAW5B,EAAM6B,cACjBJ,KAAK,QACLC,IAAI,IACJC,IAAI,SAEN,4BAAQG,QAAS9B,EAAM+B,YAAaf,SAAUhB,EAAMe,WAApD,QAGA,4BAAQe,QAAS9B,EAAMgC,kBAAmBhB,SAAUhB,EAAMe,WAA1D,yBC5BN,SAASkB,EAAcC,GAGrB,IAFA,IAAIC,EAAM,GAEDC,EAAI,EAAGA,EAAIF,EAAME,IACxBD,EAAIE,KAAKD,GAGX,IAAK,IAAIA,EAAID,EAAI/C,OAAS,EAAGgD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAMH,EAAIC,GACVG,EAAIC,KAAKC,MAAMD,KAAKE,SAAWN,GACnCD,EAAIC,GAAKD,EAAII,GACbJ,EAAII,GAAKD,EAGX,OAAOH,E,2BCdF,SAASQ,EAAMC,GACpB,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,MAG/C,SAASI,EAAKb,EAAKC,EAAGG,GAC3B,IAAID,EAAMH,EAAIC,GACdD,EAAIC,GAAKD,EAAII,GACbJ,EAAII,GAAKD,EAGJ,SAASW,EAAUC,EAAQC,EAAKf,EAAGG,GACxCW,EAAOd,GAAKe,EACZD,EAAOX,GAAKY,EAGP,SAASC,EAAaF,EAAQC,EAAKE,EAAYC,GACpD,IAAK,IAAIlB,EAAIiB,EAAYjB,GAAKkB,EAAWlB,IACvCc,EAAOd,GAAKe,E,4CCfD,WAA0BlE,EAAOC,EAAYK,EAAOgE,GAApD,2BAAAC,EAAA,sDACLC,EAAiDF,EAAjDE,SAAUC,EAAuCH,EAAvCG,cAAeC,EAAwBJ,EAAxBI,MAAOC,EAAiBL,EAAjBK,aAEpCC,GAAS,EACTC,EAAkB7E,EAAMG,OAJf,WAMK,IAAXyE,EANM,iBAOXA,GAAS,EAEAzB,EAAI,EATF,YASKA,EAAI0B,EAAkB,GAT3B,wBAUT5E,EAAWkD,GAAK,MAChBlD,EAAWkD,EAAI,GAAK,MAEpBsB,EAAcxE,GAbL,UAcHyD,EAAMgB,IAAU,GAdb,QAgBL1E,EAAMmD,GAAKnD,EAAMmD,EAAI,KACvBY,EAAK/D,EAAOmD,EAAGA,EAAI,GACnBqB,EAASxE,GACT4E,GAAS,GAGX3E,EAAWkD,GAAK,QAChBlD,EAAWkD,EAAI,GAAK,QACpBsB,EAAcxE,GAxBL,QAS8BkD,IAT9B,uBA2BXlD,EAAW4E,EAAkB,GAAK,QAClCJ,EAAcxE,GACd4E,IA7BW,8BAgCbF,GAAa,EAAOrE,GAhCP,kBAiCNN,GAjCM,6C,kECAf,WAAyBA,EAAOC,EAAYK,EAAOgE,GAAnD,YAKiBQ,EALjB,EAiBiBC,EAjBjB,EA+CWC,EA/CX,SAAAT,EAAA,6DA+CWS,EA/CX,SA+CsC/E,EAAYgF,EAAOC,GACrD,IAAK,IAAI/B,EAAI8B,EAAO9B,GAAK+B,EAAK/B,IACN,UAAlBlD,EAAWkD,KACblD,EAAWkD,GAAK,UAlDxB,oCAAAoB,EAAA,MAiBE,WAAyBvE,EAAOiF,EAAOC,GAAvC,mBAAAX,EAAA,sDACQY,EAAQnF,EAAMkF,GACpBjF,EAAWiF,GAAO,SACd/B,EAAI8B,EAAQ,EACZ3B,EAAI2B,EAJV,YAMS3B,EAAI4B,GANb,wBAOIjF,EAAWqD,GAAK,MAEZtD,EAAMsD,GAAK6B,IACbhC,IACAlD,EAAWkD,GAAK,OAChBY,EAAK/D,EAAOmD,EAAGG,IAGjBkB,EAASxE,GACTyE,EAAcxE,GAhBlB,UAiBUyD,EAAMgB,KAjBhB,QAkBIpB,IAlBJ,8BAqBES,EAAK/D,EAAOmD,EAAI,EAAG+B,GACnBjF,EAAWiF,GAAO,MAClBjF,EAAWkD,EAAI,GAAK,QACpB6B,EAA2B/E,EAAYgF,EAAOC,GAC9CV,EAASxE,GACTyE,EAAcxE,GA1BhB,kBA2BSkD,EAAI,GA3Bb,6CAjBF,uBAiBiB4B,EAjBjB,oFAAAR,EAAA,MAKE,WAAyBvE,EAAOiF,EAAOC,GAAvC,eAAAX,EAAA,2DACMU,EAAQC,GADd,iCAE6BH,EAAU/E,EAAOiF,EAAOC,GAFrD,cAEUE,EAFV,gBAIUN,EAAU9E,EAAOiF,EAAOG,EAAa,GAJ/C,uBAKUN,EAAU9E,EAAOoF,EAAa,EAAGF,GAL3C,+BAMaD,IAAUC,IACnBjF,EAAWgF,GAAS,QACpBR,EAAcxE,IARlB,6CALF,uBAKiB6E,EALjB,gDACUN,EAAiDF,EAAjDE,SAAUC,EAAuCH,EAAvCG,cAAeC,EAAwBJ,EAAxBI,MAAOC,EAAiBL,EAAjBK,aAD1C,SAEQG,EAAU9E,EAAO,EAAGA,EAAMG,OAAS,GAF3C,OAGEwE,GAAa,EAAOrE,GAHtB,4C,sBAwDe+E,M,8FCxDA,WACbrF,EACAC,EACAK,EACAgE,GAJa,yBAAAC,EAAA,sDAMLC,EAAiDF,EAAjDE,SAAUC,EAAuCH,EAAvCG,cAAeC,EAAwBJ,EAAxBI,MAAOC,EAAiBL,EAAjBK,aAE/BxB,EAAI,EARA,YAQGA,EAAInD,EAAMG,QARb,iBAUXF,EADIqD,EAAIH,GACQ,MAVL,YAWJnD,EAAMsD,GAAKtD,EAAMsD,EAAI,IAAMA,EAAI,GAX3B,wBAYTS,EAAK/D,EAAOsD,EAAGA,EAAI,GACnBrD,EAAWqD,GAAK,QAChBrD,EAAWqD,EAAI,GAAK,MACpBkB,EAASxE,GACTyE,EAAcxE,GAhBL,UAiBHyD,EAAMgB,KAjBH,QAkBTpB,IAlBS,8BAqBXrD,EAAWqD,GAAK,OAChBmB,EAAcxE,GAtBH,UAuBLyD,EAAMgB,KAvBD,QAwBXzE,EAAWqD,GAAK,QAChBmB,EAAcxE,GAzBH,QAQqBkD,IARrB,uBA4BbgB,EAAalE,EAAY,QAAS,EAAGD,EAAMG,OAAS,GACpDsE,EAAcxE,GACd0E,GAAa,EAAOrE,GA9BP,6C,kECAf,WAAyBN,EAAOC,EAAYK,EAAOgE,GAAnD,YAKiBgB,EALjB,EAqBiBC,EArBjB,EA6DiBC,EA7DjB,WAAAjB,EAAA,iGAAAA,EAAA,MA6DE,WAAyCkB,EAAQC,GAAjD,mBAAAnB,EAAA,sDAIE,IAHIjB,EAAI,EAEFqC,EAAcF,EAAOtF,SAAWH,EAAMG,OACnCgD,EAAIuC,EAAYvC,EAAIsC,EAAOtF,OAASuF,EAAYvC,IACvDnD,EAAMmD,GAAKsC,EAAOnC,GAClBrD,EAAWkD,GAAK,MACZA,EAAI,IACNlD,EAAWkD,EAAI,GAAKwC,EAAc,QAAU,SAE9CrC,IAVJ,OAaEkB,EAASxE,GACTyE,EAAcxE,GAdhB,SAeQyD,EAAMgB,KAfd,OAiBEzE,EAAWyF,EAAaD,EAAOtF,OAAS,GAAKwF,EACzC,QACA,QAnBN,4CA7DF,uBA6DiBH,EA7DjB,kFAAAjB,EAAA,MAqBE,WAAqBqB,EAAcC,EAAeZ,EAAOa,EAAQZ,GAAjE,yBAAAX,EAAA,sDACEwB,EAAgB9F,EAAYgF,EAAOa,EAAQZ,GAC3CV,EAASxE,GAELgG,EAAc,GACd7C,EAAI8B,EACJ3B,EAAIwC,EANV,WAQSF,EAAazF,SAAU0F,EAAc1F,OAR9C,wBASU8F,EAAI9C,EACJ+C,EAAI5C,EAEVU,EAAU/D,EAAY,MAAOkD,EAAGG,GAChCmB,EAAcxE,GAblB,UAcUyD,EAAMgB,KAdhB,QAgBQkB,EAAa,GAAKC,EAAc,IAClC1C,IACA6C,EAAY5C,KAAKwC,EAAaO,WAE9B7C,IACA0C,EAAY5C,KAAKyC,EAAcM,UAGjCnC,EAAU/D,EAAY,QAASgG,EAAGC,GAClCH,EAAgB9F,EAAYgF,EAAOa,EAAQZ,GAC3CT,EAAcxE,GA1BlB,8BA6BQwF,EAASO,EAAYI,OACzBR,EAAaS,QAAQD,OAAOP,EAAcQ,UAG5ClC,EAAalE,EAAY,QAASgF,EAAOC,GACzCT,EAAcxE,GAlChB,UAoCQuF,EAA0BC,EAAQR,GApC1C,iCAqCSQ,GArCT,6CArBF,uBAqBiBF,EArBjB,wFAAAhB,EAAA,MAKE,WAAyB+B,EAAUrB,EAAOC,GAA1C,uBAAAX,EAAA,2DACM+B,EAASnG,OAAS,GADxB,yCAEWmG,GAFX,cAKQR,EAASvC,KAAKC,MAAM8C,EAASnG,OAAS,GAEtCoG,EAAQD,EAASD,MAAM,EAAGP,GAC1BU,EAAQF,EAASD,MAAMP,GAR/B,SAU2BR,EAAUiB,EAAOtB,EAAOA,EAAQa,EAAS,GAVpE,cAUQW,EAVR,iBAW2BnB,EAAUkB,EAAOvB,EAAQa,EAAQZ,GAX5D,eAWQwB,EAXR,iBAaenB,EAAMkB,EAAYC,EAAYzB,EAAOA,EAAQa,EAAQZ,GAbpE,sFALF,uBAKiBI,EALjB,gDACUd,EAAiDF,EAAjDE,SAAUC,EAAuCH,EAAvCG,cAAeC,EAAwBJ,EAAxBI,MAAOC,EAAiBL,EAAjBK,aAD1C,SAEQW,EAAUtF,EAAO,EAAGA,EAAMG,OAAS,GAF3C,OAGEwE,GAAa,EAAOrE,GAHtB,6C,sBAoFA,SAASyF,EAAgB9F,EAAYyF,EAAYiB,EAAaC,GAC5D3G,EAAW0G,GAAe,SAC1B1G,EAAWyF,GAAc,SACzBzF,EAAW2G,GAAY,SAGVC,M,8FC1Ff,WAAkC7G,EAAOC,EAAYK,EAAOgE,GAA5D,YAKiBwC,EALjB,EAmBiB/B,EAnBjB,EAiGWC,EAjGX,SAAAT,EAAA,6DAiGWS,EAjGX,SAiGsC/E,EAAYgF,EAAOC,GACrD,IAAK,IAAI/B,EAAI8B,EAAO9B,GAAK+B,EAAK/B,IACN,UAAlBlD,EAAWkD,KACblD,EAAWkD,GAAK,UApGxB,oCAAAoB,EAAA,MAmBE,WAAyBvE,EAAOiF,EAAOC,GAAvC,uBAAAX,EAAA,sDACEP,EAAU/D,EAAY,SAAUgF,EAAOC,GAEnClF,EAAMiF,GAASjF,EAAMkF,KACvBnB,EAAK/D,EAAOiF,EAAOC,GACnBV,EAASxE,IAEP+G,EAAS/G,EAAMiF,GACf+B,EAAShH,EAAMkF,GAEf/B,EAAI8B,EAAQ,EACZ3B,EAAI4B,EAAM,EAEV+B,EAAOhC,EAAQ,EAbrB,YAeSgC,GAAQ3D,GAfjB,kCAgBUI,EAAMgB,KAhBhB,aAkBQ1E,EAAMiH,GAAQF,GAAU/G,EAAMiH,GAAQD,GAlB9C,iBAmBM/G,EAAWgH,GAAQ,SACnBxC,EAAcxE,GApBpB,6BAqBeD,EAAMiH,GAAQF,GArB7B,iBAsBMhD,EAAK/D,EAAOiH,EAAM9D,GAClBlD,EAAWkD,GAAK,OAEZnD,EAAMiH,GAAQD,GAAUhH,EAAMiH,GAAQF,IACxC9G,EAAWgH,GAAQ,UAGrBzC,EAASxE,GACTyE,EAAcxE,GACdkD,IA/BN,6BAgCenD,EAAMiH,IAASD,GAhC9B,8BAiCahH,EAAMsD,GAAK0D,GAAUC,EAAO3D,GAjCzC,wBAkCQrD,EAAWqD,GAAK,MAChBmB,EAAcxE,GACdqD,IApCR,UAqCcI,EAAMgB,KArCpB,uCAwCMX,EAAK/D,EAAOiH,EAAM3D,GAClBrD,EAAWqD,GAAK,MAChBrD,EAAWgH,GAAQ,SACnBzC,EAASxE,GACTyE,EAAcxE,GA5CpB,UA6CYyD,EAAMgB,KA7ClB,WA8CMpB,MAEItD,EAAMiH,GAAQF,GAhDxB,wBAiDQhD,EAAK/D,EAAOiH,EAAM9D,GAClBlD,EAAWkD,GAAK,OAChBqB,EAASxE,GACTyE,EAAcxE,GApDtB,UAqDcyD,EAAMgB,KArDpB,QAsDQvB,IAtDR,wBAwDQlD,EAAWgH,GAAQ,SACnBxC,EAAcxE,GAzDtB,gCA4DMA,EAAWgH,GAAQ,SACnBxC,EAAcxE,GA7DpB,QA+DIgH,IA/DJ,8BAiEE9D,IACAG,IAEAS,EAAK/D,EAAOiF,EAAO9B,GACnBY,EAAK/D,EAAOkF,EAAK5B,GACjBU,EAAU/D,EAAY,QAASkD,EAAGG,GAClCkB,EAASxE,GACTyE,EAAcxE,GACd+E,EAA2B/E,EAAYgF,EAAOC,GAzEhD,UA0EQxB,EAAMgB,KA1Ed,iCA2ES,CAACvB,EAAGG,IA3Eb,6CAnBF,uBAmBiByB,EAnBjB,oFAAAR,EAAA,MAKE,WAAkCvE,EAAOiF,EAAOC,GAAhD,eAAAX,EAAA,2DACMU,EAAQC,GADd,iCAEyBH,EAAU/E,EAAOiF,EAAOC,GAFjD,cAEUgC,EAFV,gBAIUJ,EAAmB9G,EAAOiF,EAAOiC,EAAO,GAAK,GAJvD,uBAKUJ,EAAmB9G,EAAOkH,EAAO,GAAK,EAAGA,EAAO,GAAK,GAL/D,wBAMUJ,EAAmB9G,EAAOkH,EAAO,GAAK,EAAGhC,GANnD,mCAOaD,IAAUC,EAPvB,wBAQIjF,EAAWgF,GAAS,QACpBR,EAAcxE,GATlB,UAUUyD,EAAMgB,KAVhB,6CALF,uBAKiBoC,EALjB,gDACUtC,EAAiDF,EAAjDE,SAAUC,EAAuCH,EAAvCG,cAAeC,EAAwBJ,EAAxBI,MAAOC,EAAiBL,EAAjBK,aAD1C,SAEQmC,EAAmB9G,EAAO,EAAGA,EAAMG,OAAS,GAFpD,OAGEwE,GAAa,EAAOrE,GAHtB,4C,sBA0Ge6G,M,kDCoGAC,E,kDAnMb,aAAe,IAAD,uBACZ,gBAkCFC,aAAe,WACb,IAAM7G,EAAS,GAAK,EAAK8G,MAAMC,OAAOpH,OAAS,KAC/C,OAAO,EAAKmH,MAAMC,OAAOnH,KAAI,SAACoH,EAAOlH,GACnC,OACE,4BACE,kBAAC,EAAD,CACEE,OAAQA,EACRqB,iBAAkB2F,EAAM3F,iBACxBH,YAAa,EAAK+F,oBAAoBC,KAAzB,gBACb9G,IAAKN,EACLN,MAAOwH,EAAMxH,MACbC,WAAYuH,EAAMvH,WAClBK,MAAOA,SA/CH,EAsDdwC,YAAc,WACZ,EAAK6E,SAAS,CAAE7F,WAAW,IAC3B,EAAK6F,UAAS,SAACL,GAAD,MAAY,CACxBC,OAAQD,EAAMC,OAAOnH,KAAI,SAACoH,GACxB,OAAO,2BAAKA,GAAZ,IAAmB1F,WAAW,WAIlC,IAAMwC,EAAY,CAChBE,SAAU,EAAKA,SAASkD,KAAd,gBACVjD,cAAe,EAAKA,cAAciD,KAAnB,gBACfhD,MAAO,EAAKkD,SAASF,KAAd,gBACP/C,aAAc,EAAKA,aAAa+C,KAAlB,iBAGhB,EAAKJ,MAAMC,OAAOM,SAAQ,SAACL,EAAOlH,GAAW,IACnCN,EAAwCwH,EAAxCxH,MAAOC,EAAiCuH,EAAjCvH,WACf,OADgDuH,EAArB3F,kBAEzB,IAAK,ULnFE,SAAf,iCKoFUiG,CAAW9H,EAAOC,EAAYK,EAAOgE,GACrC,MACF,IAAK,QACHe,EAAUrF,EAAOC,EAAYK,EAAOgE,GACpC,MACF,IAAK,QACHuC,EAAU7G,EAAOC,EAAYK,EAAOgE,GACpC,MACF,IAAK,aH5FE,SAAf,iCG6FUyD,CAAc/H,EAAOC,EAAYK,EAAOgE,GACxC,MACF,IAAK,qBACH6C,EAAmBnH,EAAOC,EAAYK,EAAOgE,QArFvC,EA6FdE,SAAW,SAACxE,EAAOgI,GACjB,EAAKL,UAAS,SAACL,GAAD,MAAY,CACxBC,OAAQD,EAAMC,OAAOnH,KAAI,SAACoH,EAAOlH,GAC/B,OAAIA,IAAU0H,EACL,2BAAKR,GAAZ,IAAmBxH,MAAOA,IAEnB,eAAKwH,WAnGN,EAyGd/C,cAAgB,SAACxE,EAAY+H,GAC3B,EAAKL,UAAS,SAACL,GAAD,MAAY,CACxBC,OAAQD,EAAMC,OAAOnH,KAAI,SAACoH,EAAOlH,GAC/B,OAAIA,IAAU0H,EACL,2BAAKR,GAAZ,IAAmBvH,WAAYA,IAExB,eAAKuH,WA/GN,EAqHdC,oBAAsB,SAACQ,EAAUD,GAC/B,EAAKL,UAAS,SAACL,GAAD,MAAY,CACxBC,OAAQD,EAAMC,OAAOnH,KAAI,SAACoH,EAAOlH,GAC/B,OAAIA,IAAU0H,EACL,2BAAKR,GAAZ,IAAmB3F,iBAAkBoG,IAE9B,eAAKT,WA3HN,EAiId7C,aAAe,SAAC7C,EAAWkG,GACzB,EAAKL,UAAS,SAACL,GAAD,MAAY,CACxBC,OAAQD,EAAMC,OAAOnH,KAAI,SAACoH,EAAOlH,GAC/B,OAAIA,IAAU0H,EACL,2BAAKR,GAAZ,IAAmB1F,UAAWA,IAEvB,eAAK0F,UAKlB,IAAIU,GAAiB,EAErB,EAAKZ,MAAMC,OAAOM,SAAQ,SAACL,IACD,IAApBA,EAAM1F,YACRoG,GAAiB,MAIrB,EAAKP,SAAS,CAAE7F,UAAWoG,KApJf,EAuJdN,SAAW,WACT,OAAO,EAAKN,MAAM5C,OAxJN,EA4JdpC,aAAe,SAACb,GAId,IAHA,IAAM0G,EAAcnF,EAAcvB,EAAEE,OAAOC,OACrC3B,EAAamI,MAAMC,SAAS5G,EAAEE,OAAOC,QAAQ0G,KAAK,SAE/CnF,EAAI,EAAGA,EAAI,EAAKmE,MAAMC,OAAOpH,OAAQgD,IAC5C,EAAKsB,cAAcxE,EAAWoG,QAASlD,GACvC,EAAKqB,SAAS2D,EAAY9B,QAASlD,IAlKzB,EAsKdP,cAAgB,SAACnB,GACf,EAAKkG,SAAS,CAAEjD,MAAOjD,EAAEE,OAAOC,SAvKpB,EA0KdmB,kBAAoB,WAClB,GAAiC,IAA7B,EAAKuE,MAAMC,OAAOpH,OAAc,CAClC,IAAMoI,EAAY,EAAKjB,MAAMC,OAC7BgB,EAAUnF,KAAK,EAAKoF,4BACpB,EAAKb,SAAS,CACZJ,OAAQgB,QAEL,CACL,IAAMA,EAAY,EAAKjB,MAAMC,OAC7BgB,EAAUE,MACV,EAAKd,SAAS,CAAEJ,OAAQgB,MApLd,EAwLdC,yBAA2B,WACzB,IAAME,EAAY,EAAKpB,MAAMC,OAAO,GAAGvH,MAAMqG,QAC7C,MAAO,CACLrG,MAAO0I,EACPzI,WAAYmI,MAAMM,EAAUvI,QAAQmI,KAAK,SACzCzG,iBAAkB,SAClBC,WAAW,IA9LD,OAGZ,EAAKwF,MAAQ,CACXC,OAAQ,CACN,CACEvH,MAAOgD,EAJO,KAKd/C,WAAYmI,MALE,KAKiBE,KAAK,SACpCzG,iBAAkB,SAClBC,WAAW,IAGf4C,MAAO,EACP5C,WAAW,GAbD,E,qDAkBZ,OACE,yBAAKjB,UAAU,8BACb,yBAAKuB,GAAG,QAAQvB,UAAU,eACxB,6DAEF,kBAAC,EAAD,CACEiC,YAAahC,KAAKgC,YAAY4E,KAAK5G,MACnCwB,aAAcxB,KAAKwB,aAAaoF,KAAK5G,MACrC8B,cAAe9B,KAAK8B,cAAc8E,KAAK5G,MACvCgB,UAAWhB,KAAKwG,MAAMxF,UACtBiB,kBAAmBjC,KAAKiC,kBAAkB2E,KAAK5G,QAEjD,4BAAKA,KAAKuG,qB,GA/BOrG,aCAV2H,MARf,WACE,OACE,yBAAK9H,UAAU,OACb,kBAAC,EAAD,QCKc+H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN1H,IAAS2H,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c6fa8da.chunk.js","sourcesContent":["import React, { Component, PureComponent } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./styles/Histogram.css\";\r\n\r\nclass Histogram extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"Histogram container-fluid\">\r\n        {this.createBarList(this.props.array, this.props.colorArray)}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  createBarList = (array, colorArray) => {\r\n    const width = 100 / array.length;\r\n    const length = array.length;\r\n    return array.map((element, index) => {\r\n      return this.createBar(element / length, colorArray[index], width, index);\r\n    });\r\n  };\r\n\r\n  createBar = (height, color, width, index) => {\r\n    const styles = {\r\n      height: height * 100 + \"%\",\r\n      width: width + \"%\",\r\n      backgroundColor: color,\r\n    };\r\n\r\n    return (\r\n      <li>\r\n        <Bar key={height + color + index + width} styles={styles}></Bar>\r\n      </li>\r\n    );\r\n  };\r\n}\r\n\r\nclass Bar extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.styles != nextProps.styles) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"Bar\" style={this.props.styles}></div>;\r\n  }\r\n}\r\n\r\nexport default Histogram;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass SortTypeDropDown extends Component {\r\n  componentDidMount() {\r\n    ReactDOM.findDOMNode(this).addEventListener(\"change\", (e) =>\r\n      this.props.setSortType(e.target.value, this.props.index)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { selectedSortType, isSorting, index } = this.props;\r\n\r\n    return (\r\n      <form disabled={isSorting}>\r\n        <select name={\"sort-drp-down-\" + index}>\r\n          <option value=\"bubble\" selected={\"bubble\" === selectedSortType}>\r\n            Bubble\r\n          </option>\r\n          <option value=\"insertion\" selected={\"insertion\" === selectedSortType}>\r\n            Insertion\r\n          </option>\r\n          <option value=\"merge\" selected={\"merge\" === selectedSortType}>\r\n            Merge\r\n          </option>\r\n          <option value=\"quick\" selected={\"quick\" === selectedSortType}>\r\n            Quick\r\n          </option>\r\n          <option\r\n            value=\"dualpivotquicksort\"\r\n            selected={\"dualpivotquicksort\" === selectedSortType}\r\n          >\r\n            Quick (dual pivot)\r\n          </option>\r\n        </select>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortTypeDropDown;\r\n","import React, { Component } from \"react\";\r\nimport Histogram from \"./Histogram\";\r\nimport \"./styles/Panel.css\";\r\nimport SortTypeDropDown from \"./SortTypeDropDown\";\r\n\r\nfunction Panel(props) {\r\n  return (\r\n    <div className=\"Panel\" style={{ height: props.height }}>\r\n      <SortTypeDropDown\r\n        index={props.index}\r\n        isSorting={props.isSorting}\r\n        selectedSortType={props.selectedSortType}\r\n        setSortType={props.setSortType}\r\n      ></SortTypeDropDown>\r\n      <Histogram array={props.array} colorArray={props.colorArray}></Histogram>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Panel;\r\n","import React from \"react\";\r\nimport \"./styles/ConfigBanner.css\";\r\n\r\nfunction ConfigBanner(props) {\r\n  return (\r\n    <div className=\"ConfigBanner\">\r\n      <text>Size: </text>\r\n      <input\r\n        id=\"size-slider\"\r\n        onChange={props.onChangeSize}\r\n        defaultValue=\"100\"\r\n        type=\"range\"\r\n        min=\"4\"\r\n        max=\"300\"\r\n        disabled={props.isSorting}\r\n      ></input>\r\n      <text>Speed: </text>\r\n      <input\r\n        id=\"speed-slider\"\r\n        defaultValue=\"0\"\r\n        onMouseUp={props.onChangeDelay}\r\n        type=\"range\"\r\n        min=\"0\"\r\n        max=\"1000\"\r\n      ></input>\r\n      <button onClick={props.onClickSort} disabled={props.isSorting}>\r\n        Sort\r\n      </button>\r\n      <button onClick={props.toggleSecondArray} disabled={props.isSorting}>\r\n        Toggle Second Array\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfigBanner;\r\n","function shuffledArray(size) {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    arr.push(i);\r\n  }\r\n\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    let tmp = arr[i];\r\n    let j = Math.floor(Math.random() * i);\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nfunction reverseSortedArray(size) {\r\n  let arr = [];\r\n\r\n  for (let i = size - 1; i >= 0; i--) {\r\n    arr.push(i);\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport { shuffledArray, reverseSortedArray };\r\n","export function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function swap(arr, i, j) {\r\n  let tmp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = tmp;\r\n}\r\n\r\nexport function colorPair(colArr, col, i, j) {\r\n  colArr[i] = col;\r\n  colArr[j] = col;\r\n}\r\n\r\nexport function colorSection(colArr, col, firstIndex, lastIndex) {\r\n  for (let i = firstIndex; i <= lastIndex; i++) {\r\n    colArr[i] = col;\r\n  }\r\n}\r\n","import { sleep, swap, colorPair, colorSection } from \"../util/sortutil\";\r\n\r\nexport default async function bubbleSort(array, colorArray, index, callbacks) {\r\n  const { setArray, setColorArray, delay, setIsSorting } = callbacks;\r\n\r\n  let sorted = false;\r\n  let lastSortedIndex = array.length;\r\n\r\n  while (sorted === false) {\r\n    sorted = true;\r\n\r\n    for (let i = 0; i < lastSortedIndex - 1; i++) {\r\n      colorArray[i] = \"red\";\r\n      colorArray[i + 1] = \"red\";\r\n\r\n      setColorArray(colorArray);\r\n      await sleep(delay() / 1);\r\n\r\n      if (array[i] > array[i + 1]) {\r\n        swap(array, i, i + 1);\r\n        setArray(array);\r\n        sorted = false;\r\n      }\r\n\r\n      colorArray[i] = \"white\";\r\n      colorArray[i + 1] = \"white\";\r\n      setColorArray(colorArray);\r\n    }\r\n\r\n    colorArray[lastSortedIndex - 1] = \"green\";\r\n    setColorArray(colorArray);\r\n    lastSortedIndex--;\r\n  }\r\n\r\n  setIsSorting(false, index);\r\n  return array;\r\n}\r\n","import { sleep, swap, colorPair, colorSection } from \"../util/sortutil\";\r\n\r\nasync function quickSort(array, colorArray, index, callbacks) {\r\n  const { setArray, setColorArray, delay, setIsSorting } = callbacks;\r\n  await quicksort(array, 0, array.length - 1);\r\n  setIsSorting(false, index);\r\n\r\n  async function quicksort(array, start, end) {\r\n    if (start < end) {\r\n      const pivotIndex = await partition(array, start, end);\r\n\r\n      await quicksort(array, start, pivotIndex - 1);\r\n      await quicksort(array, pivotIndex + 1, end);\r\n    } else if (start === end) {\r\n      colorArray[start] = \"green\";\r\n      setColorArray(colorArray);\r\n    }\r\n  }\r\n\r\n  async function partition(array, start, end) {\r\n    const pivot = array[end];\r\n    colorArray[end] = \"yellow\";\r\n    let i = start - 1;\r\n    let j = start;\r\n\r\n    while (j < end) {\r\n      colorArray[j] = \"red\";\r\n\r\n      if (array[j] < pivot) {\r\n        i++;\r\n        colorArray[i] = \"blue\";\r\n        swap(array, i, j);\r\n      }\r\n\r\n      setArray(array);\r\n      setColorArray(colorArray);\r\n      await sleep(delay());\r\n      j++;\r\n    }\r\n\r\n    swap(array, i + 1, end);\r\n    colorArray[end] = \"red\";\r\n    colorArray[i + 1] = \"green\";\r\n    removeColouringInPartition(colorArray, start, end);\r\n    setArray(array);\r\n    setColorArray(colorArray);\r\n    return i + 1;\r\n  }\r\n\r\n  function removeColouringInPartition(colorArray, start, end) {\r\n    for (let i = start; i <= end; i++) {\r\n      if (colorArray[i] !== \"green\") {\r\n        colorArray[i] = \"white\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default quickSort;\r\n","import { swap, sleep, colorSection, colorPair } from \"../util/sortutil\";\r\n\r\nexport default async function insertionSort(\r\n  array,\r\n  colorArray,\r\n  index,\r\n  callbacks\r\n) {\r\n  const { setArray, setColorArray, delay, setIsSorting } = callbacks;\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    colorArray[j] = \"red\";\r\n    while (array[j] < array[j - 1] && j > 0) {\r\n      swap(array, j, j - 1);\r\n      colorArray[j] = \"white\";\r\n      colorArray[j - 1] = \"red\";\r\n      setArray(array);\r\n      setColorArray(colorArray);\r\n      await sleep(delay());\r\n      j--;\r\n    }\r\n\r\n    colorArray[j] = \"blue\";\r\n    setColorArray(colorArray);\r\n    await sleep(delay());\r\n    colorArray[j] = \"white\";\r\n    setColorArray(colorArray);\r\n  }\r\n\r\n  colorSection(colorArray, \"green\", 0, array.length - 1);\r\n  setColorArray(colorArray);\r\n  setIsSorting(false, index);\r\n}\r\n","import { sleep, colorPair, colorSection } from \"../util/sortutil\";\r\n\r\nasync function mergeSort(array, colorArray, index, callbacks) {\r\n  const { setArray, setColorArray, delay, setIsSorting } = callbacks;\r\n  await mergesort(array, 0, array.length - 1);\r\n  setIsSorting(false, index);\r\n\r\n  async function mergesort(subArray, start, end) {\r\n    if (subArray.length < 2) {\r\n      return subArray;\r\n    }\r\n\r\n    const middle = Math.floor(subArray.length / 2);\r\n\r\n    const lCopy = subArray.slice(0, middle);\r\n    const rCopy = subArray.slice(middle);\r\n\r\n    const lSortedArr = await mergesort(lCopy, start, start + middle - 1);\r\n    const rSortedArr = await mergesort(rCopy, start + middle, end);\r\n\r\n    return await merge(lSortedArr, rSortedArr, start, start + middle, end);\r\n  }\r\n\r\n  async function merge(leftSubArray, rightSubArray, start, middle, end) {\r\n    colorBoundaries(colorArray, start, middle, end);\r\n    setArray(array);\r\n\r\n    let shadowArray = [];\r\n    let i = start;\r\n    let j = middle;\r\n\r\n    while (leftSubArray.length && rightSubArray.length) {\r\n      const k = i;\r\n      const l = j;\r\n\r\n      colorPair(colorArray, \"red\", i, j);\r\n      setColorArray(colorArray);\r\n      await sleep(delay());\r\n\r\n      if (leftSubArray[0] < rightSubArray[0]) {\r\n        i++;\r\n        shadowArray.push(leftSubArray.shift());\r\n      } else {\r\n        j++;\r\n        shadowArray.push(rightSubArray.shift());\r\n      }\r\n\r\n      colorPair(colorArray, \"white\", k, l);\r\n      colorBoundaries(colorArray, start, middle, end);\r\n      setColorArray(colorArray);\r\n    }\r\n\r\n    const result = shadowArray.concat(\r\n      leftSubArray.slice().concat(rightSubArray.slice())\r\n    );\r\n\r\n    colorSection(colorArray, \"white\", start, end);\r\n    setColorArray(colorArray);\r\n\r\n    await copyMergeResultToOriginal(result, start);\r\n    return result;\r\n  }\r\n\r\n  async function copyMergeResultToOriginal(result, startIndex) {\r\n    let j = 0;\r\n\r\n    const isLastMerge = result.length === array.length;\r\n    for (let i = startIndex; i < result.length + startIndex; i++) {\r\n      array[i] = result[j];\r\n      colorArray[i] = \"red\";\r\n      if (i > 0) {\r\n        colorArray[i - 1] = isLastMerge ? \"green\" : \"white\";\r\n      }\r\n      j++;\r\n    }\r\n\r\n    setArray(array);\r\n    setColorArray(colorArray);\r\n    await sleep(delay());\r\n\r\n    colorArray[startIndex + result.length - 1] = isLastMerge\r\n      ? \"green\"\r\n      : \"white\";\r\n  }\r\n}\r\n\r\nfunction colorBoundaries(colorArray, startIndex, middleIndex, endIndex) {\r\n  colorArray[middleIndex] = \"purple\";\r\n  colorArray[startIndex] = \"yellow\";\r\n  colorArray[endIndex] = \"yellow\";\r\n}\r\n\r\nexport default mergeSort;\r\n","import { swap, sleep, colorPair } from \"../util/sortutil\";\r\n\r\nasync function dualPivotQuickSort(array, colorArray, index, callbacks) {\r\n  const { setArray, setColorArray, delay, setIsSorting } = callbacks;\r\n  await dualpivotquicksort(array, 0, array.length - 1);\r\n  setIsSorting(false, index);\r\n\r\n  async function dualpivotquicksort(array, start, end) {\r\n    if (start < end) {\r\n      const pivots = await partition(array, start, end);\r\n\r\n      await dualpivotquicksort(array, start, pivots[0] - 1);\r\n      await dualpivotquicksort(array, pivots[0] + 1, pivots[1] - 1);\r\n      await dualpivotquicksort(array, pivots[1] + 1, end);\r\n    } else if (start === end) {\r\n      colorArray[start] = \"green\";\r\n      setColorArray(colorArray);\r\n      await sleep(delay());\r\n    }\r\n  }\r\n\r\n  async function partition(array, start, end) {\r\n    colorPair(colorArray, \"yellow\", start, end);\r\n\r\n    if (array[start] > array[end]) {\r\n      swap(array, start, end);\r\n      setArray(array);\r\n    }\r\n    let lpivot = array[start];\r\n    let rpivot = array[end];\r\n\r\n    let i = start + 1;\r\n    let j = end - 1;\r\n\r\n    let curr = start + 1;\r\n\r\n    while (curr <= j) {\r\n      await sleep(delay());\r\n\r\n      if (array[curr] > lpivot && array[curr] < rpivot) {\r\n        colorArray[curr] = \"purple\";\r\n        setColorArray(colorArray);\r\n      } else if (array[curr] < lpivot) {\r\n        swap(array, curr, i);\r\n        colorArray[i] = \"blue\";\r\n\r\n        if (array[curr] < rpivot && array[curr] > lpivot) {\r\n          colorArray[curr] = \"purple\";\r\n        }\r\n\r\n        setArray(array);\r\n        setColorArray(colorArray);\r\n        i++;\r\n      } else if (array[curr] >= rpivot) {\r\n        while (array[j] > rpivot && curr < j) {\r\n          colorArray[j] = \"red\";\r\n          setColorArray(colorArray);\r\n          j--;\r\n          await sleep(delay());\r\n        }\r\n\r\n        swap(array, curr, j);\r\n        colorArray[j] = \"red\";\r\n        colorArray[curr] = \"purple\";\r\n        setArray(array);\r\n        setColorArray(colorArray);\r\n        await sleep(delay());\r\n        j--;\r\n\r\n        if (array[curr] < lpivot) {\r\n          swap(array, curr, i);\r\n          colorArray[i] = \"blue\";\r\n          setArray(array);\r\n          setColorArray(colorArray);\r\n          await sleep(delay());\r\n          i++;\r\n        } else {\r\n          colorArray[curr] = \"purple\";\r\n          setColorArray(colorArray);\r\n        }\r\n      } else {\r\n        colorArray[curr] = \"purple\";\r\n        setColorArray(colorArray);\r\n      }\r\n      curr++;\r\n    }\r\n    i--;\r\n    j++;\r\n\r\n    swap(array, start, i);\r\n    swap(array, end, j);\r\n    colorPair(colorArray, \"green\", i, j);\r\n    setArray(array);\r\n    setColorArray(colorArray);\r\n    removeColouringInPartition(colorArray, start, end);\r\n    await sleep(delay());\r\n    return [i, j];\r\n  }\r\n\r\n  function removeColouringInPartition(colorArray, start, end) {\r\n    for (let i = start; i <= end; i++) {\r\n      if (colorArray[i] !== \"green\") {\r\n        colorArray[i] = \"white\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default dualPivotQuickSort;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/SortVizApp.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Panel from \"./Panel\";\r\nimport ConfigBanner from \"./ConfigBanner\";\r\nimport { shuffledArray, reverseSortedArray } from \"../util/arrayGeneration\";\r\nimport bubbleSort from \"../algorithms/bubbleSort\";\r\nimport quickSort from \"../algorithms/quickSort\";\r\nimport insertionSort from \"../algorithms/insertionSort\";\r\nimport mergeSort from \"../algorithms/mergeSort\";\r\nimport dualPivotQuickSort from \"../algorithms/dualPivotQuickSort\";\r\n\r\nclass SortVizApp extends Component {\r\n  constructor() {\r\n    super();\r\n    const initialSize = 100;\r\n    this.state = {\r\n      panels: [\r\n        {\r\n          array: shuffledArray(initialSize),\r\n          colorArray: Array(initialSize).fill(\"white\"),\r\n          selectedSortType: \"bubble\",\r\n          isSorting: false,\r\n        },\r\n      ],\r\n      delay: 0,\r\n      isSorting: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SortVizApp container-fluid\">\r\n        <div id=\"title\" className=\"page-header\">\r\n          <h1>Sorting Algorithm Visualizer</h1>\r\n        </div>\r\n        <ConfigBanner\r\n          onClickSort={this.onClickSort.bind(this)}\r\n          onChangeSize={this.onChangeSize.bind(this)}\r\n          onChangeDelay={this.onChangeDelay.bind(this)}\r\n          isSorting={this.state.isSorting}\r\n          toggleSecondArray={this.toggleSecondArray.bind(this)}\r\n        ></ConfigBanner>\r\n        <ul>{this.createPanels()}</ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createPanels = () => {\r\n    const height = 80 / this.state.panels.length + \"vh\";\r\n    return this.state.panels.map((panel, index) => {\r\n      return (\r\n        <li>\r\n          <Panel\r\n            height={height}\r\n            selectedSortType={panel.selectedSortType}\r\n            setSortType={this.setSelectedSortType.bind(this)}\r\n            key={index}\r\n            array={panel.array}\r\n            colorArray={panel.colorArray}\r\n            index={index}\r\n          ></Panel>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  onClickSort = () => {\r\n    this.setState({ isSorting: true });\r\n    this.setState((state) => ({\r\n      panels: state.panels.map((panel) => {\r\n        return { ...panel, isSorting: true };\r\n      }),\r\n    }));\r\n\r\n    const callbacks = {\r\n      setArray: this.setArray.bind(this),\r\n      setColorArray: this.setColorArray.bind(this),\r\n      delay: this.getDelay.bind(this),\r\n      setIsSorting: this.setIsSorting.bind(this),\r\n    };\r\n\r\n    this.state.panels.forEach((panel, index) => {\r\n      const { array, colorArray, selectedSortType } = panel;\r\n      switch (selectedSortType) {\r\n        case \"bubble\":\r\n          bubbleSort(array, colorArray, index, callbacks);\r\n          break;\r\n        case \"quick\":\r\n          quickSort(array, colorArray, index, callbacks);\r\n          break;\r\n        case \"merge\":\r\n          mergeSort(array, colorArray, index, callbacks);\r\n          break;\r\n        case \"insertion\":\r\n          insertionSort(array, colorArray, index, callbacks);\r\n          break;\r\n        case \"dualpivotquicksort\":\r\n          dualPivotQuickSort(array, colorArray, index, callbacks);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  };\r\n\r\n  setArray = (array, panelIndex) => {\r\n    this.setState((state) => ({\r\n      panels: state.panels.map((panel, index) => {\r\n        if (index === panelIndex) {\r\n          return { ...panel, array: array };\r\n        } else {\r\n          return { ...panel };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setColorArray = (colorArray, panelIndex) => {\r\n    this.setState((state) => ({\r\n      panels: state.panels.map((panel, index) => {\r\n        if (index === panelIndex) {\r\n          return { ...panel, colorArray: colorArray };\r\n        } else {\r\n          return { ...panel };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setSelectedSortType = (sortType, panelIndex) => {\r\n    this.setState((state) => ({\r\n      panels: state.panels.map((panel, index) => {\r\n        if (index === panelIndex) {\r\n          return { ...panel, selectedSortType: sortType };\r\n        } else {\r\n          return { ...panel };\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  setIsSorting = (isSorting, panelIndex) => {\r\n    this.setState((state) => ({\r\n      panels: state.panels.map((panel, index) => {\r\n        if (index === panelIndex) {\r\n          return { ...panel, isSorting: isSorting };\r\n        } else {\r\n          return { ...panel };\r\n        }\r\n      }),\r\n    }));\r\n\r\n    let isStillSorting = false;\r\n\r\n    this.state.panels.forEach((panel) => {\r\n      if (panel.isSorting === true) {\r\n        isStillSorting = true;\r\n      }\r\n    });\r\n\r\n    this.setState({ isSorting: isStillSorting });\r\n  };\r\n\r\n  getDelay = () => {\r\n    return this.state.delay;\r\n  };\r\n\r\n  // Config callback functions to configure the sort\r\n  onChangeSize = (e) => {\r\n    const shuffledArr = shuffledArray(e.target.value);\r\n    const colorArray = Array(parseInt(e.target.value)).fill(\"white\");\r\n\r\n    for (let i = 0; i < this.state.panels.length; i++) {\r\n      this.setColorArray(colorArray.slice(), i);\r\n      this.setArray(shuffledArr.slice(), i);\r\n    }\r\n  };\r\n\r\n  onChangeDelay = (e) => {\r\n    this.setState({ delay: e.target.value });\r\n  };\r\n\r\n  toggleSecondArray = () => {\r\n    if (this.state.panels.length === 1) {\r\n      const newPanels = this.state.panels;\r\n      newPanels.push(this.createDefaultPanelObject());\r\n      this.setState({\r\n        panels: newPanels,\r\n      });\r\n    } else {\r\n      const newPanels = this.state.panels;\r\n      newPanels.pop();\r\n      this.setState({ panels: newPanels });\r\n    }\r\n  };\r\n\r\n  createDefaultPanelObject = () => {\r\n    const baseArray = this.state.panels[0].array.slice();\r\n    return {\r\n      array: baseArray,\r\n      colorArray: Array(baseArray.length).fill(\"white\"),\r\n      selectedSortType: \"bubble\",\r\n      isSorting: false,\r\n    };\r\n  };\r\n}\r\n\r\nexport default SortVizApp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SortVizApp from \"./component/SortVizApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVizApp></SortVizApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}