{"version":3,"sources":["component/Histogram.jsx","component/SortTypeDropDown.jsx","component/ShuffleDropDown.jsx","component/DataSetDropDown.jsx","component/Panel.jsx","component/ConfigBanner.jsx","util/arrayGeneration.js","algorithms/bubblesort.js","module/ArrayPointer.js","algorithms/selectionsort.js","algorithms/insertionsort.js","algorithms/mergesort.js","algorithms/quicksort.js","algorithms/dualPivotQuickSort.js","algorithms/randomizedquick.js","algorithms/sortingAlgorithms.js","util/sortutil.js","module/ArrayViewController.js","component/SortVizApp.jsx","App.js","serviceWorker.js","index.js"],"names":["Histogram","createBarList","array","colorArray","maxVal","width","length","maxHeight","map","element","index","createBar","height","color","styles","backgroundColor","key","className","this","props","Component","Bar","nextProps","style","SortTypeDropDown","selectedSortType","isSorting","onChangeSortType","disabled","onChange","name","value","selected","ShuffleDropDown","domNode","ReactDOM","findDOMNode","setShuffle","addEventListener","e","target","setShuffles","shuffle","DataSetDropDown","setDataSet","setDataSets","dataSet","Panel","hidden","arrayAccesses","ConfigBanner","initialSize","initialDelay","areSorting","onClickSort","onChangeSize","onChangeDelay","onClickGenerateArrays","id","defaultValue","type","min","max","onClick","onMouseUp","zeroCentredPolynomialArray","size","degree","arr","lo","Math","floor","hi","ceil","i","push","pow","translation","arrayGenerators","linear","random","quadratic","cubic","quintic","a","sorted","lastSortedIndex","compare","swap","ArrayPointer","curr","prev","trackPointer","pointTo","get","minVal","j","currVal","unmark","markPair","mergeSort","start","end","mid","merge","mark","shadowArr","vali","valj","set","quickSort","partition","partitionIndex","pivot","compareToVal","increment","untrackPointer","unmarkAll","dualPivotQuickSort","partitions","lpivot","rpivot","decrement","untrackPointers","unmarkPair","randomizedQuick","randomIndex","sortingAlgorithms","bubble","selection","insertion","quick","dualpivotquick","randomizedquick","sleep","ms","Promise","resolve","setTimeout","ArrayViewController","callbacks","delay","multiplier","getDelay","setArrayAccesses","colorTrackedPointers","prevColor","compareVals","leftVal","rightVal","val","elementVal","valOne","valTwo","lessThan","equal","setArray","iprev","jprev","tmp","jVal","setColorArray","markSection","begin","markAll","unmarkSection","pointer","setColor","pointers","splice","indexOf","forEach","untrackAllPointers","pop","setIsSorting","SortVizApp","createPanels","setSortType","arrayviews","state","arrayview","sortType","getArrayViewCallbacks","generateArray","Array","parseInt","fill","slice","setMaxVal","setState","avc","sortingAlgorithm","onChangeSizes","onToggleSecondArray","newPanels","createDefaultPanelObject","panels","setSize","onChangeShuffle","onClickGenerateArray","refreshArrayView","setArrayViewProperty","viewIndex","setArrayViewProperties","areStillSorting","basearrayview","initialArray","initialColorArray","initialMaxVal","sign","generatorResult","shuffleArray","sort","b","App","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb3e609a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./styles/Histogram.css\";\r\n\r\nclass Histogram extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"Histogram container-fluid\">\r\n                {this.createBarList(\r\n                    this.props.array,\r\n                    this.props.colorArray,\r\n                    this.props.maxVal\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    createBarList = (array, colorArray, maxVal) => {\r\n        const width = 100 / array.length;\r\n        const maxHeight = maxVal;\r\n        return array.map((element, index) => {\r\n            return this.createBar(\r\n                element / maxHeight,\r\n                colorArray[index],\r\n                width,\r\n                index\r\n            );\r\n        });\r\n    };\r\n\r\n    createBar = (height, color, width, index) => {\r\n        const styles = {\r\n            height: height * 100 + \"%\",\r\n            width: width + \"%\",\r\n            backgroundColor: color,\r\n        };\r\n\r\n        return (\r\n            <li>\r\n                <Bar key={height + color + index + width} styles={styles}></Bar>\r\n            </li>\r\n        );\r\n    };\r\n}\r\n\r\nclass Bar extends Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        if (this.props.styles !== nextProps.styles) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"Bar\" style={this.props.styles}></div>;\r\n    }\r\n}\r\n\r\nexport default Histogram;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass SortTypeDropDown extends Component {\r\n    render() {\r\n        const { selectedSortType, isSorting, index, onChangeSortType } = this.props;\r\n\r\n        return (\r\n            <form disabled={isSorting} onChange={onChangeSortType}>\r\n                <select name={\"sort-drp-down-\" + index}>\r\n                    <option value=\"bubble\" selected={\"bubble\" === selectedSortType}>\r\n                        Bubble\r\n                    </option>\r\n                    <option value=\"insertion\" selected={\"insertion\" === selectedSortType}>\r\n                        Insertion\r\n                    </option>\r\n                    <option value=\"selection\" selected={\"selection\" === selectedSortType}>\r\n                        Selection\r\n                    </option>\r\n                    <option value=\"merge\" selected={\"merge\" === selectedSortType}>\r\n                        Merge\r\n                    </option>\r\n                    <option value=\"quick\" selected={\"quick\" === selectedSortType}>\r\n                        Quick\r\n                    </option>\r\n                    <option value=\"dualpivotquick\" selected={\"dualpivotquick\" === selectedSortType}>\r\n                        Quick (dual pivot)\r\n                    </option>\r\n                    <option value=\"randomizedquick\" selected={\"randomizedquick\" === selectedSortType}>\r\n                        Quick (randomized)\r\n                    </option>\r\n                </select>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortTypeDropDown;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass ShuffleDropDown extends Component {\r\n    componentDidMount() {\r\n        const domNode = ReactDOM.findDOMNode(this);\r\n\r\n        if (this.props.setShuffle) {\r\n            domNode.addEventListener(\"change\", (e) => this.props.setShuffle(e.target.value, this.props.index));\r\n        } else {\r\n            domNode.addEventListener(\"change\", (e) => this.props.setShuffles(e.target.value));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { shuffle, isSorting, index } = this.props;\r\n\r\n        return (\r\n            <form disabled={isSorting}>\r\n                <select name={\"data-set-drp-down\" + index}>\r\n                    <option value=\"shuffled\" selected={\"shuffled\" === shuffle}>\r\n                        Shuffled\r\n                    </option>\r\n                    <option value=\"unshuffled\" selected={\"unshuffled\" === shuffle}>\r\n                        Unshuffled\r\n                    </option>\r\n                    <option value=\"reversed\" selected={\"reversed\" === shuffle}>\r\n                        Reverse Sorted\r\n                    </option>\r\n                    <option value=\"sorted\" selected={\"sorted\" === shuffle}>\r\n                        Sorted\r\n                    </option>\r\n                </select>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShuffleDropDown;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass DataSetDropDown extends Component {\r\n    componentDidMount() {\r\n        const domNode = ReactDOM.findDOMNode(this);\r\n\r\n        if (this.props.setDataSet) {\r\n            domNode.addEventListener(\"change\", (e) => this.props.setDataSet(e.target.value, this.props.index));\r\n        } else {\r\n            domNode.addEventListener(\"change\", (e) => this.props.setDataSets(e.target.value));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { dataSet, isSorting, index } = this.props;\r\n\r\n        return (\r\n            <form disabled={isSorting}>\r\n                <select name={\"data-set-drp-down\" + index}>\r\n                    <option value=\"random\" selected={\"random\" === dataSet}>\r\n                        Random\r\n                    </option>\r\n                    <option value=\"linear\" selected={\"linear\" === dataSet}>\r\n                        Linear\r\n                    </option>\r\n                    <option value=\"quadratic\" selected={\"quadratic\" === dataSet}>\r\n                        Quadratic\r\n                    </option>\r\n                    <option value=\"cubic\" selected={\"cubic\" === dataSet}>\r\n                        Cubic\r\n                    </option>\r\n                    <option value=\"quintic\" selected={\"quintic\" === dataSet}>\r\n                        Quintic\r\n                    </option>\r\n                </select>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataSetDropDown;\r\n","import React from \"react\";\r\nimport Histogram from \"./Histogram\";\r\nimport \"./styles/Panel.css\";\r\nimport SortTypeDropDown from \"./SortTypeDropDown\";\r\nimport ShuffleDropDown from \"./ShuffleDropDown\";\r\nimport DataSetDropDown from \"./DataSetDropDown\";\r\n\r\nfunction Panel(props) {\r\n    return (\r\n        <div className=\"Panel\" style={{ height: props.height }}>\r\n            <SortTypeDropDown\r\n                index={props.index}\r\n                isSorting={props.isSorting}\r\n                selectedSortType={props.selectedSortType}\r\n                onChangeSortType={props.onChangeSortType}\r\n            ></SortTypeDropDown>\r\n            <Histogram array={props.array} colorArray={props.colorArray} maxVal={props.maxVal}></Histogram>\r\n            <text hidden={props.arrayAccesses === 0}>Array Accesses: {props.arrayAccesses}</text>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Panel;\r\n","import React from \"react\";\r\nimport \"./styles/ConfigBanner.css\";\r\nimport DataSetDropDown from \"./DataSetDropDown\";\r\nimport ShuffleDropDown from \"./ShuffleDropDown\";\r\n\r\nfunction ConfigBanner(props) {\r\n    const {\r\n        initialSize,\r\n        initialDelay,\r\n        areSorting,\r\n        onClickSort,\r\n        onChangeSize,\r\n        onChangeDelay,\r\n        onClickGenerateArrays,\r\n    } = props;\r\n    return (\r\n        <div className=\"ConfigBanner container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-9\">\r\n                    <text>Size: </text>\r\n                    <input\r\n                        id=\"size-slider\"\r\n                        onChange={onChangeSize}\r\n                        defaultValue={initialSize}\r\n                        type=\"range\"\r\n                        min=\"8\"\r\n                        max=\"256\"\r\n                        disabled={areSorting}\r\n                    ></input>\r\n                    <DataSetDropDown dataSet={props.dataSet} setDataSets={props.setDataSets}></DataSetDropDown>\r\n                    <ShuffleDropDown shuffle={props.shuffle} setShuffle={props.setShuffles}></ShuffleDropDown>\r\n\r\n                    <button onClick={onClickGenerateArrays}>Generate</button>\r\n                </div>\r\n                <div className=\"col-3 sort-controls\">\r\n                    <button id=\"sort-btn\" onClick={onClickSort} disabled={areSorting}>\r\n                        Sort\r\n                    </button>\r\n                    <text>Speed: </text>\r\n                    <input\r\n                        id=\"speed-slider\"\r\n                        defaultValue={initialDelay}\r\n                        onMouseUp={onChangeDelay}\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"500\"\r\n                    ></input>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfigBanner;\r\n","const randomArray = (size) => {\r\n    const arr = []\r\n    for (let i = 0; i < size; i++) {\r\n        arr.push(Math.floor(Math.random() * (size - 1)))\r\n    }\r\n    return arr\r\n}\r\n\r\nconst linearArray = (size) => {\r\n    const arr = []\r\n    for (let i = 1; i <= size; i++) {\r\n        arr.push(i)\r\n    }\r\n    return arr\r\n}\r\n\r\nconst polynomialArray = (size, degree) => {\r\n    const arr = []\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        arr.push(Math.pow(i, degree))\r\n    }\r\n    return arr\r\n}\r\n\r\nconst zeroCentredPolynomialArray = (size, degree) => {\r\n    let arr = []\r\n\r\n    const lo = -Math.floor(size / 2)\r\n    const hi = Math.ceil(size / 2)\r\n\r\n    for (let i = lo; i < hi; i++) {\r\n        arr.push(Math.pow(i, degree))\r\n    }\r\n\r\n    if (degree % 2 !== 0) {\r\n        const translation = Math.pow(Math.ceil(size / 2), degree)\r\n        arr = arr.map((element) => element + translation)\r\n    }\r\n\r\n    return arr\r\n}\r\n\r\nconst quadraticArray = (size) => {\r\n    return zeroCentredPolynomialArray(size, 2)\r\n}\r\n\r\nconst cubicArray = (size) => {\r\n    return zeroCentredPolynomialArray(size, 3)\r\n}\r\n\r\nconst quinticArray = (size) => {\r\n    return zeroCentredPolynomialArray(size, 5)\r\n}\r\n\r\nconst arrayGenerators = {\r\n    linear: linearArray,\r\n    random: randomArray,\r\n    quadratic: quadraticArray,\r\n    cubic: cubicArray,\r\n    quintic: quinticArray,\r\n}\r\n\r\nexport default arrayGenerators\r\n","export default async function bubblesort(arr) {\r\n    let sorted = false;\r\n    let lastSortedIndex = arr.length;\r\n\r\n    while (!sorted) {\r\n        sorted = true;\r\n\r\n        for (let i = 0; i < lastSortedIndex - 1; i++) {\r\n            if ((await arr.compare(i, i + 1)) === 1) {\r\n                await arr.swap(i, i + 1);\r\n                sorted = false;\r\n            }\r\n        }\r\n        lastSortedIndex--;\r\n    }\r\n\r\n    arr.sorted();\r\n}\r\n","export default class ArrayPointer {\r\n  constructor(index) {\r\n    this.curr = index;\r\n    this.prev = -1;\r\n    this.color = \"white\";\r\n  }\r\n\r\n  setColor(color) {\r\n    this.color = color;\r\n  }\r\n\r\n  increment() {\r\n    this.prev = this.curr;\r\n    this.curr = this.curr + 1;\r\n  }\r\n\r\n  decrement() {\r\n    this.prev = this.curr;\r\n    this.curr = this.curr - 1;\r\n  }\r\n\r\n  pointTo(index) {\r\n    this.prev = this.curr;\r\n    this.curr = index;\r\n  }\r\n\r\n  valueOf() {\r\n    return this.curr;\r\n  }\r\n\r\n  toString() {\r\n    return this.curr;\r\n  }\r\n}\r\n","import ArrayPointer from \"../module/ArrayPointer\";\r\n\r\nexport default async function selectionsort(arr) {\r\n    let length = arr.length;\r\n\r\n    let min = new ArrayPointer(0);\r\n    arr.trackPointer(min, \"purple\");\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        min.pointTo(i);\r\n\r\n        let minVal = await arr.get(min);\r\n        for (let j = i; j < length; j++) {\r\n            const currVal = await arr.get(j);\r\n            if (currVal < minVal) {\r\n                min.pointTo(j);\r\n                minVal = currVal;\r\n            }\r\n        }\r\n\r\n        await arr.swap(i, min);\r\n        arr.unmark(min);\r\n    }\r\n    arr.sorted();\r\n}\r\n","export default async function insertionsort(arr) {\r\n    const length = arr.length;\r\n\r\n    for (let i = 1; i < length; i++) {\r\n        let j = i;\r\n        arr.markPair(j, j - 1);\r\n\r\n        while ((await arr.compare(j, j - 1)) === -1 && j > 0) {\r\n            await arr.swap(j, j - 1);\r\n            j--;\r\n        }\r\n    }\r\n    arr.sorted();\r\n}\r\n","export default async function mergesort(arr) {\r\n    await mergeSort(arr, 0, arr.length);\r\n    arr.sorted();\r\n}\r\n\r\nasync function mergeSort(arr, start, end) {\r\n    if (start + 1 < end) {\r\n        const mid = Math.floor((start + end) / 2);\r\n\r\n        await mergeSort(arr, start, mid);\r\n        await mergeSort(arr, mid, end);\r\n\r\n        await merge(arr, start, mid, end);\r\n    }\r\n}\r\n\r\nasync function merge(arr, start, mid, end) {\r\n    arr.mark(start, \"yellow\");\r\n    arr.mark(mid, \"purple\");\r\n    arr.mark(end - 1, \"yellow\");\r\n\r\n    const shadowArr = [];\r\n\r\n    let i = start,\r\n        j = mid;\r\n\r\n    while (i < mid && j < end) {\r\n        const vali = await arr.get(i),\r\n            valj = await arr.get(j);\r\n\r\n        shadowArr.push(vali < valj ? vali : valj);\r\n        vali < valj ? i++ : j++;\r\n    }\r\n\r\n    while (i < mid) shadowArr.push(await arr.get(i++));\r\n    while (j < end) shadowArr.push(await arr.get(j++));\r\n\r\n    arr.unmark(mid);\r\n\r\n    for (i = 0; i < end - start; ++i) {\r\n        await arr.set(start + i, shadowArr[i]);\r\n    }\r\n\r\n    arr.unmark(start);\r\n    arr.unmark(end - 1);\r\n}\r\n","import ArrayPointer from \"../module/ArrayPointer\";\r\n\r\nexport default async function quicksort(arr) {\r\n    await quickSort(arr, 0, arr.length - 1);\r\n    arr.sorted();\r\n}\r\n\r\nasync function quickSort(arr, start, end) {\r\n    if (start < end) {\r\n        let partitionIndex = await partition(arr, start, end);\r\n\r\n        await quickSort(arr, start, partitionIndex - 1);\r\n        await quickSort(arr, partitionIndex + 1, end);\r\n    }\r\n}\r\n\r\nasync function partition(arr, start, end) {\r\n    const pivot = await arr.get(end);\r\n\r\n    // mark pivot element\r\n    arr.mark(end, \"yellow\");\r\n\r\n    // initialize L and R pointers\r\n    let i = new ArrayPointer(start);\r\n    let j = new ArrayPointer(start);\r\n\r\n    arr.trackPointer(i, \"green\");\r\n\r\n    // scan for elements smaller than pivot with right pointer and place infront of left pointer, then increment left pointer\r\n    while (j < end) {\r\n        if ((await arr.compareToVal(j, pivot)) === -1) {\r\n            await arr.swap(i, j);\r\n            i.increment();\r\n        }\r\n        j.increment();\r\n    }\r\n\r\n    arr.untrackPointer(i);\r\n\r\n    // unmark pivot and swap with final partition boundary\r\n    arr.unmarkAll();\r\n    await arr.swap(i, end);\r\n    return i;\r\n}\r\n","import ArrayPointer from \"../module/ArrayPointer\";\r\nexport default async function dualpivotquicksort(arr) {\r\n    await dualPivotQuickSort(arr, 0, arr.length - 1);\r\n    arr.sorted();\r\n}\r\n\r\nasync function dualPivotQuickSort(arr, start, end) {\r\n    if (start < end) {\r\n        const partitions = await partition(arr, start, end);\r\n\r\n        await dualPivotQuickSort(arr, start, partitions[0] - 1);\r\n        await dualPivotQuickSort(arr, partitions[0] + 1, partitions[1] - 1);\r\n        await dualPivotQuickSort(arr, partitions[1] + 1, end);\r\n    }\r\n}\r\n\r\nasync function partition(arr, start, end) {\r\n    if ((await arr.compare(start, end)) === 1) {\r\n        await arr.swap(start, end);\r\n    }\r\n\r\n    arr.markPair(start, end, \"yellow\");\r\n\r\n    const lpivot = await arr.get(start);\r\n    const rpivot = await arr.get(end);\r\n\r\n    let i = new ArrayPointer(start + 1);\r\n    let j = new ArrayPointer(end - 1);\r\n    let curr = new ArrayPointer(start + 1);\r\n\r\n    arr.trackPointer(i, \"green\");\r\n    arr.trackPointer(j, \"green\");\r\n\r\n    while (curr <= j) {\r\n        let currVal = await arr.get(curr);\r\n        if (currVal < lpivot) {\r\n            await arr.swap(curr, i);\r\n            i.increment();\r\n        } else if (currVal >= rpivot) {\r\n            while ((await arr.compareToVal(j, rpivot)) === 1 && curr < j) {\r\n                j.decrement();\r\n            }\r\n\r\n            await arr.swap(curr, j);\r\n            j.decrement();\r\n\r\n            if ((await arr.compareToVal(curr, lpivot)) === -1) {\r\n                await arr.swap(curr, i);\r\n                i.increment();\r\n            }\r\n        }\r\n        curr.increment();\r\n    }\r\n\r\n    i.decrement();\r\n    j.increment();\r\n\r\n    arr.untrackPointers(i, j);\r\n    arr.unmarkPair(start, end);\r\n    await arr.swap(start, i, \"yellow\");\r\n    await arr.swap(end, j, \"yellow\");\r\n    return [i, j];\r\n}\r\n","import ArrayPointer from \"../module/ArrayPointer\";\r\n\r\nexport default async function randomizedquick(arr) {\r\n    await randomizedQuick(arr, 0, arr.length - 1);\r\n    arr.sorted();\r\n}\r\n\r\nasync function randomizedQuick(arr, start, end) {\r\n    if (start < end) {\r\n        const partitionIndex = await partition(arr, start, end);\r\n\r\n        await randomizedQuick(arr, start, partitionIndex - 1);\r\n        await randomizedQuick(arr, partitionIndex + 1, end);\r\n    }\r\n}\r\n\r\nasync function partition(arr, start, end) {\r\n    const randomIndex = start + Math.floor(Math.random() * (end - start + 1));\r\n    const pivot = await arr.get(randomIndex);\r\n    await arr.swap(end, randomIndex);\r\n    arr.mark(end, \"yellow\");\r\n\r\n    let i = new ArrayPointer(start);\r\n    let j = new ArrayPointer(start);\r\n    arr.trackPointer(i, \"green\");\r\n    arr.trackPointer(j, \"green\");\r\n\r\n    while (j < end) {\r\n        if ((await arr.compareToVal(j, pivot)) === -1) {\r\n            await arr.swap(i, j);\r\n            i.increment();\r\n        }\r\n        j.increment();\r\n    }\r\n\r\n    arr.untrackPointers(i, j);\r\n    arr.unmarkAll();\r\n    await arr.swap(i, end);\r\n\r\n    return i;\r\n}\r\n","import bubblesort from \"./bubblesort\";\r\nimport selectionsort from \"./selectionsort\";\r\nimport insertionsort from \"./insertionsort\";\r\nimport mergesort from \"./mergesort\";\r\nimport quicksort from \"./quicksort\";\r\nimport dualpivotquicksort from \"./dualPivotQuickSort\";\r\nimport randomizedquicksort from \"./randomizedquick\";\r\n\r\nconst sortingAlgorithms = {\r\n    bubble: bubblesort,\r\n    selection: selectionsort,\r\n    insertion: insertionsort,\r\n    merge: mergesort,\r\n    quick: quicksort,\r\n    dualpivotquick: dualpivotquicksort,\r\n    randomizedquick: randomizedquicksort,\r\n};\r\n\r\nexport default sortingAlgorithms;\r\n","export function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let tmp = array[i];\r\n        let j = Math.floor(Math.random() * i);\r\n        array[i] = array[j];\r\n        array[j] = tmp;\r\n    }\r\n}\r\n","import { sleep } from \"../util/sortutil\";\r\n\r\nclass ArrayViewController {\r\n    constructor(array, colorArray, index, callbacks) {\r\n        this.array = array;\r\n        this.colorArray = colorArray;\r\n        this.length = array.length;\r\n        this.index = index;\r\n        this.getDelay = callbacks.getDelay;\r\n        this.setArray = callbacks.setArray;\r\n        this.setColorArray = callbacks.setColorArray;\r\n        this.setIsSorting = callbacks.setIsSorting;\r\n        this.setArrayAccesses = callbacks.setArrayAccesses;\r\n\r\n        this.pointers = [];\r\n        this.arrayAccesses = 0;\r\n    }\r\n\r\n    // delay to be applied to async array manipulations\r\n    delay = async (multiplier = 1) => {\r\n        await sleep(this.getDelay() * multiplier);\r\n    };\r\n\r\n    // Animated array manipulations. Each array read and write are delayed by one unit and\r\n    // highlighted with tracked elements are refreshed before and after any manipulation\r\n\r\n    get = async (i, color = \"red\") => {\r\n        const { array, colorArray, setArrayAccesses, index, colorTrackedPointers, mark, delay } = this;\r\n        let { arrayAccesses } = this;\r\n\r\n        colorTrackedPointers();\r\n\r\n        const prevColor = colorArray[i];\r\n        mark(i, color);\r\n        await delay();\r\n        mark(i, prevColor);\r\n\r\n        setArrayAccesses(++arrayAccesses, index);\r\n        this.arrayAccesses = arrayAccesses;\r\n\r\n        return array[i];\r\n    };\r\n\r\n    compare = async (i, j, color = \"red\") => {\r\n        const { markPair, unmarkPair, get, compareVals } = this;\r\n\r\n        markPair(i, j, color);\r\n        const leftVal = await get(i, color);\r\n        const rightVal = await get(j, color);\r\n        unmarkPair(i, j);\r\n\r\n        return compareVals(leftVal, rightVal);\r\n    };\r\n\r\n    compareToVal = async (i, val, color = \"red\") => {\r\n        const { get } = this;\r\n        const elementVal = await get(i, color);\r\n        return this.compareVals(elementVal, val);\r\n    };\r\n\r\n    compareVals = async (valOne, valTwo) => {\r\n        const lessThan = -1;\r\n        const equal = 0;\r\n        const moreThan = 1;\r\n\r\n        if (valOne > valTwo) return moreThan;\r\n        if (valOne < valTwo) return lessThan;\r\n        return equal;\r\n    };\r\n\r\n    set = async (i, val, color = \"red\") => {\r\n        const { array, setArray, colorArray, index, setArrayAccesses, colorTrackedPointers, mark, delay } = this;\r\n        let { arrayAccesses } = this;\r\n\r\n        colorTrackedPointers();\r\n\r\n        const prevColor = colorArray[i];\r\n        mark(i, color);\r\n        array[i] = val;\r\n        setArray(array, index);\r\n        await delay();\r\n        mark(i, prevColor);\r\n\r\n        setArrayAccesses(++arrayAccesses, index);\r\n        this.arrayAccesses = arrayAccesses;\r\n    };\r\n\r\n    swap = async (i, j, color = \"blue\") => {\r\n        if (i === j) return;\r\n        const { colorArray, colorTrackedPointers, mark, markPair, get, set } = this;\r\n\r\n        colorTrackedPointers();\r\n\r\n        const iprev = colorArray[i];\r\n        const jprev = colorArray[j];\r\n        markPair(i, j, color);\r\n\r\n        const tmp = await get(i, color);\r\n        const jVal = await get(j, color);\r\n        await set(i, jVal, color);\r\n        await set(j, tmp, color);\r\n\r\n        mark(i, iprev);\r\n        mark(j, jprev);\r\n    };\r\n\r\n    // Array color manipulations. These operations are not delayed\r\n    mark = (i, color = \"red\") => {\r\n        const { colorArray, setColorArray, index } = this;\r\n        colorArray[i] = color;\r\n        setColorArray(colorArray, index);\r\n    };\r\n\r\n    markPair = (i, j, color = \"red\") => {\r\n        this.mark(i, color);\r\n        this.mark(j, color);\r\n    };\r\n\r\n    markSection = (begin, end, color) => {\r\n        const colorArray = this.colorArray;\r\n        for (let i = begin; i <= end; i++) {\r\n            colorArray[i] = color;\r\n        }\r\n\r\n        this.setColorArray(colorArray, this.index);\r\n    };\r\n\r\n    markAll = (color) => {\r\n        const { colorArray, setColorArray, length, index } = this;\r\n        for (let i = 0; i < length; i++) {\r\n            colorArray[i] = color;\r\n        }\r\n        setColorArray(colorArray, index);\r\n    };\r\n\r\n    unmark = (i) => {\r\n        this.mark(i, \"white\");\r\n    };\r\n\r\n    unmarkPair = (i, j) => {\r\n        this.mark(i, \"white\");\r\n        this.mark(j, \"white\");\r\n    };\r\n\r\n    unmarkSection = (begin, end) => {\r\n        this.markSection(begin, end, \"white\");\r\n    };\r\n\r\n    unmarkAll = () => {\r\n        this.markAll(\"white\");\r\n    };\r\n\r\n    trackPointer = (pointer, color) => {\r\n        pointer.setColor(color);\r\n        this.pointers.push(pointer);\r\n        this.mark(pointer, color);\r\n    };\r\n\r\n    untrackPointer = (pointer) => {\r\n        const pointers = this.pointers;\r\n        this.unmark(pointer);\r\n        this.unmark(pointer.prev);\r\n        pointers.splice(pointers.indexOf(pointer, 1));\r\n    };\r\n\r\n    untrackPointers = (...pointers) => {\r\n        pointers.forEach((pointer) => this.untrackPointer(pointer));\r\n    };\r\n\r\n    untrackAllPointers = () => {\r\n        this.colorTrackedPointers();\r\n        const { pointers, colorArray, setColorArray } = this;\r\n\r\n        for (let i = pointers.length - 1; i > -1; i--) {\r\n            colorArray[pointers[i]] = \"white\";\r\n            pointers.pop();\r\n        }\r\n\r\n        setColorArray(colorArray);\r\n    };\r\n\r\n    colorTrackedPointers = () => {\r\n        const { pointers, colorArray, setColorArray } = this;\r\n\r\n        pointers.forEach((pointer) => {\r\n            colorArray[pointer] = pointer.color;\r\n            if (pointer.prev !== -1) colorArray[pointer.prev] = \"white\";\r\n        });\r\n\r\n        setColorArray(colorArray);\r\n    };\r\n\r\n    sorted = async () => {\r\n        for (let i = 0; i < 3; i++) {\r\n            this.markSection(0, this.array.length - 1, \"green\");\r\n            await sleep(250);\r\n            this.markSection(0, this.array.length - 1, \"white\");\r\n            await sleep(250);\r\n        }\r\n        this.setIsSorting(false, this.index);\r\n    };\r\n}\r\n\r\nexport default ArrayViewController;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Panel from \"./Panel\";\r\nimport ConfigBanner from \"./ConfigBanner\";\r\n\r\nimport arrayGenerators from \"../util/arrayGeneration\";\r\nimport sortingAlgorithms from \"../algorithms/sortingAlgorithms\";\r\nimport ArrayViewController from \"../module/ArrayViewController\";\r\n\r\nimport { shuffleArray } from \"../util/sortutil\";\r\n\r\nimport \"./styles/SortVizApp.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nclass SortVizApp extends Component {\r\n    constructor() {\r\n        super();\r\n        const initialSize = 64;\r\n        const initialDelay = 35;\r\n        const initialDataSet = \"linear\";\r\n        const initialShuffle = \"shuffled\";\r\n        const initialArray = this.generateArray(initialDataSet, initialSize, initialShuffle);\r\n        const initialColorArray = Array(initialSize).fill(\"white\");\r\n        const initialSelectedSortType = \"bubble\";\r\n        const initialMaxVal = Math.max(...initialArray);\r\n        this.state = {\r\n            size: initialSize,\r\n            dataSet: initialDataSet,\r\n            shuffle: initialShuffle,\r\n            delay: initialDelay,\r\n            areSorting: false,\r\n            arrayviews: [\r\n                {\r\n                    array: initialArray,\r\n                    colorArray: initialColorArray,\r\n                    sortType: initialSelectedSortType,\r\n                    isSorting: false,\r\n                    arrayAccesses: 0,\r\n                    dataSet: initialDataSet,\r\n                    shuffle: initialShuffle,\r\n                    maxVal: initialMaxVal,\r\n                },\r\n            ],\r\n        };\r\n    }\r\n\r\n    // Application is composed of a config banner and a list of panels containing array views\r\n    // Configuration is supplied at the top level config banner and applies the config to all arrays\r\n    // But also each panel supplies a config banner for its contained array view (save for delay, which is global)\r\n    render() {\r\n        const {\r\n            onClickSort,\r\n            onChangeSizes,\r\n            onChangeDelay,\r\n            setDataSets,\r\n            setShuffles,\r\n            onClickGenerateArrays,\r\n            onToggleSecondArray,\r\n        } = this;\r\n        const { areSorting } = this.state;\r\n        const sign = this.state.arrayviews.length === 1 ? \"ADD\" : \"REMOVE\";\r\n\r\n        return (\r\n            <div className=\"SortVizApp container-fluid\">\r\n                <div id=\"title\" className=\"page-header\">\r\n                    <h1>Sorting Algorithm Visualizer</h1>\r\n                </div>\r\n                <ConfigBanner\r\n                    initialSize={64}\r\n                    initialDelay={35}\r\n                    dataSet={\"linear\"}\r\n                    shuffle={\"shuffled\"}\r\n                    areSorting={areSorting}\r\n                    onClickSort={onClickSort}\r\n                    onChangeSize={onChangeSizes}\r\n                    onChangeDelay={onChangeDelay}\r\n                    onClickGenerateArrays={onClickGenerateArrays}\r\n                    setDataSets={setDataSets}\r\n                    setShuffles={setShuffles}\r\n                ></ConfigBanner>\r\n                <ul>{this.createPanels()}</ul>\r\n                <button id=\"arr-toggle-btn\" disabled={areSorting} onClick={onToggleSecondArray}>\r\n                    {sign}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createPanels = () => {\r\n        const setSortType = this.setSortType;\r\n        const onChangeSortType = this.onChangeSortType;\r\n        const arrayviews = this.state.arrayviews;\r\n        const height = 70 / this.state.arrayviews.length + \"vh\";\r\n\r\n        return arrayviews.map((arrayview, index) => {\r\n            const { array, colorArray, sortType, arrayAccesses, maxVal } = arrayview;\r\n            return (\r\n                <li>\r\n                    <Panel\r\n                        key={index}\r\n                        index={index}\r\n                        maxVal={maxVal}\r\n                        height={height}\r\n                        array={array}\r\n                        colorArray={colorArray}\r\n                        selectedSortType={sortType}\r\n                        arrayAccesses={arrayAccesses}\r\n                        setSortType={setSortType}\r\n                        onChangeSortType={onChangeSortType(index)}\r\n                    ></Panel>\r\n                </li>\r\n            );\r\n        });\r\n    };\r\n\r\n    getDelay = () => {\r\n        return this.state.delay;\r\n    };\r\n\r\n    getArrayViewCallbacks = () => {\r\n        return {\r\n            getDelay: this.getDelay,\r\n            setArray: this.setArray,\r\n            setColorArray: this.setColorArray,\r\n            setArrayAccesses: this.setArrayAccesses,\r\n            setIsSorting: this.setIsSorting,\r\n        };\r\n    };\r\n\r\n    // Config callback functions to configure the sort\r\n\r\n    onClickGenerateArrays = () => {\r\n        const array = this.generateArray(this.state.dataSet, this.state.size, this.state.shuffle);\r\n        const colorArray = Array(parseInt(array.length)).fill(\"white\");\r\n        const maxVal = Math.max(...array);\r\n\r\n        for (let i = 0; i < this.state.arrayviews.length; i++) {\r\n            this.setColorArray(colorArray.slice(), i);\r\n            this.setArray(array.slice(), i);\r\n            this.setArrayAccesses(0, i);\r\n            this.setMaxVal(maxVal, i);\r\n        }\r\n    };\r\n\r\n    onClickSort = () => {\r\n        const { arrayviews } = this.state;\r\n        const callbacks = this.getArrayViewCallbacks();\r\n\r\n        this.setState({ areSorting: true });\r\n\r\n        arrayviews.forEach((arrayview, index) => {\r\n            const avc = new ArrayViewController(arrayview.array, arrayview.colorArray, index, callbacks);\r\n\r\n            const sortingAlgorithm = sortingAlgorithms[arrayview.sortType];\r\n            sortingAlgorithm(avc);\r\n        });\r\n    };\r\n\r\n    onChangeSizes = (e) => {\r\n        const arr = this.generateArray(this.state.dataSet, e.target.value, this.state.shuffle);\r\n        const colorArray = Array(parseInt(e.target.value)).fill(\"white\");\r\n        const maxVal = Math.max(...arr);\r\n\r\n        this.setState({ size: e.target.value });\r\n        for (let i = 0; i < this.state.arrayviews.length; i++) {\r\n            this.setColorArray(colorArray.slice(), i);\r\n            this.setArray(arr.slice(), i);\r\n            this.setArrayAccesses(0, i);\r\n            this.setMaxVal(maxVal, i);\r\n        }\r\n    };\r\n\r\n    onChangeDelay = (e) => {\r\n        this.setState({ delay: e.target.value });\r\n    };\r\n\r\n    onToggleSecondArray = () => {\r\n        if (this.state.arrayviews.length === 1) {\r\n            const newPanels = this.state.arrayviews;\r\n            newPanels.push(this.createDefaultPanelObject());\r\n            this.setState({\r\n                panels: newPanels,\r\n            });\r\n        } else {\r\n            const newPanels = this.state.arrayviews;\r\n            newPanels.pop();\r\n            this.setState({ panels: newPanels });\r\n        }\r\n    };\r\n\r\n    onChangeSortType = (index) => {\r\n        return (e) => {\r\n            this.setSortType(e.target.value, index);\r\n        };\r\n    };\r\n\r\n    onChangeSize = (index) => {\r\n        return (e) => {\r\n            this.setSize(e.target.value, index);\r\n        };\r\n    };\r\n\r\n    onChangeShuffle = (index) => {\r\n        return (e) => {\r\n            this.setShuffle(e.target.value, index);\r\n        };\r\n    };\r\n\r\n    onClickGenerateArray = (index) => {\r\n        return () => {\r\n            this.refreshArrayView();\r\n        };\r\n    };\r\n\r\n    setArrayViewProperty = (name, value, viewIndex) => {\r\n        this.setState((state) => ({\r\n            arrayviews: state.arrayviews.map((arrayview, index) => {\r\n                if (index === viewIndex) {\r\n                    return { ...arrayview, [name]: value };\r\n                } else {\r\n                    return { ...arrayview };\r\n                }\r\n            }),\r\n        }));\r\n    };\r\n\r\n    setArrayViewProperties = (name, value) => {\r\n        this.setState((state) => ({\r\n            arrayviews: state.arrayviews.map((arrayview) => {\r\n                return { ...arrayview, [name]: value };\r\n            }),\r\n        }));\r\n    };\r\n\r\n    setArray = (array, viewIndex) => {\r\n        this.setArrayViewProperty(\"array\", array, viewIndex);\r\n    };\r\n\r\n    setColorArray = (colorArray, viewIndex) => {\r\n        this.setArrayViewProperty(\"colorArray\", colorArray, viewIndex);\r\n    };\r\n\r\n    setSortType = (sortType, viewIndex) => {\r\n        this.setArrayViewProperty(\"sortType\", sortType, viewIndex);\r\n    };\r\n\r\n    setDataSet = (dataSet, viewIndex) => {\r\n        this.setArrayViewProperty(\"dataSet\", dataSet, viewIndex);\r\n    };\r\n\r\n    setDataSets = (dataSet) => {\r\n        this.setArrayViewProperties(\"dataSet\", dataSet);\r\n        this.setState({ dataSet: dataSet });\r\n    };\r\n\r\n    setShuffle = (shuffle, viewIndex) => {\r\n        this.setArrayViewProperty(\"shuffle\", shuffle, viewIndex);\r\n    };\r\n\r\n    setShuffles = (shuffle) => {\r\n        this.setArrayViewProperties(\"shuffle\", shuffle);\r\n        this.setState({ shuffle: shuffle });\r\n    };\r\n\r\n    setArrayAccesses = (arrayAccesses, viewIndex) => {\r\n        this.setArrayViewProperty(\"arrayAccesses\", arrayAccesses, viewIndex);\r\n    };\r\n\r\n    setMaxVal = (maxVal, viewIndex) => {\r\n        this.setArrayViewProperty(\"maxVal\", maxVal, viewIndex);\r\n    };\r\n\r\n    setIsSorting = (isSorting, viewIndex) => {\r\n        this.setArrayViewProperty(\"isSorting\", isSorting, viewIndex);\r\n\r\n        let areStillSorting = false;\r\n\r\n        this.state.arrayviews.forEach((arrayview) => {\r\n            if (arrayview.isSorting === true) {\r\n                areStillSorting = true;\r\n            }\r\n        });\r\n\r\n        this.setState({ areSorting: areStillSorting });\r\n    };\r\n\r\n    generateArray(dataSet, size, shuffle) {\r\n        const generatorResult = arrayGenerators[dataSet];\r\n        const arr = generatorResult(size);\r\n\r\n        switch (shuffle) {\r\n            case \"shuffled\":\r\n                shuffleArray(arr);\r\n                break;\r\n            case \"reversed\":\r\n                arr.sort((a, b) => b - a);\r\n                break;\r\n            case \"sorted\":\r\n                arr.sort((a, b) => a - b);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return arr;\r\n    }\r\n    // TODO: properly copy arrayview object\r\n    createDefaultPanelObject = () => {\r\n        const basearrayview = this.state.arrayviews[0];\r\n        return {\r\n            array: basearrayview.array.slice(),\r\n            colorArray: basearrayview.colorArray.slice(),\r\n            dataSet: basearrayview.dataSet,\r\n            maxVal: basearrayview.maxVal,\r\n            shuffle: basearrayview.shuffle,\r\n            sortType: basearrayview.sortType,\r\n            isSorting: false,\r\n            arrayAccesses: 0,\r\n        };\r\n    };\r\n}\r\n\r\nexport default SortVizApp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SortVizApp from \"./component/SortVizApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVizApp></SortVizApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}